; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31942.0 

	TITLE	C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Distribute\GrpSubImage.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?m_SearchPath@CGraphicSubImage@@2PADA		; CGraphicSubImage::m_SearchPath
_DATA	SEGMENT
?m_SearchPath@CGraphicSubImage@@2PADA DB 'D:/Ymir Work/UI/', 00H ; CGraphicSubImage::m_SearchPath
	ORG $+239
_DATA	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	__snprintf
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?_Equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NQBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Equal
PUBLIC	?_Throw_tree_length_error@std@@YAXXZ		; std::_Throw_tree_length_error
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	?Type@CGraphicSubImage@@SAKXZ			; CGraphicSubImage::Type
PUBLIC	??0CGraphicSubImage@@QAE@PBD@Z			; CGraphicSubImage::CGraphicSubImage
PUBLIC	??1CGraphicSubImage@@UAE@XZ			; CGraphicSubImage::~CGraphicSubImage
PUBLIC	?CreateDeviceObjects@CGraphicSubImage@@UAE_NXZ	; CGraphicSubImage::CreateDeviceObjects
PUBLIC	?SetImageFileName@CGraphicSubImage@@QAE_NPBD@Z	; CGraphicSubImage::SetImageFileName
PUBLIC	?SetRectPosition@CGraphicSubImage@@QAEXHHHH@Z	; CGraphicSubImage::SetRectPosition
PUBLIC	?SetRectReference@CGraphicSubImage@@QAEXABUtagRECT@@@Z ; CGraphicSubImage::SetRectReference
PUBLIC	?SetSearchPath@CGraphicSubImage@@SAXPBD@Z	; CGraphicSubImage::SetSearchPath
PUBLIC	?SetImagePointer@CGraphicSubImage@@IAEXPAVCGraphicImage@@@Z ; CGraphicSubImage::SetImagePointer
PUBLIC	?OnLoad@CGraphicSubImage@@MAE_NHPBX@Z		; CGraphicSubImage::OnLoad
PUBLIC	?OnClear@CGraphicSubImage@@MAEXXZ		; CGraphicSubImage::OnClear
PUBLIC	?OnIsEmpty@CGraphicSubImage@@MBE_NXZ		; CGraphicSubImage::OnIsEmpty
PUBLIC	?OnIsType@CGraphicSubImage@@MAE_NK@Z		; CGraphicSubImage::OnIsType
PUBLIC	??_GCGraphicSubImage@@UAEPAXI@Z			; CGraphicSubImage::`scalar deleting destructor'
PUBLIC	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Insert_node
PUBLIC	??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@$$QAV21@@Z ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::operator[]
PUBLIC	??1?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@@std@@QAE@XZ ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::~map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
PUBLIC	??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NQBDABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@XZ ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::~pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??$_Traits_compare@U?$char_traits@D@std@@@std@@YAHQBDI0I@Z ; std::_Traits_compare<std::char_traits<char> >
PUBLIC	??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Find_lower_bound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >
PUBLIC	??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >::~_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >
PUBLIC	??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >
PUBLIC	??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_C@_0BB@GCADKGJO@map?1set?5too?5long@		; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_7CGraphicSubImage@@6B@			; CGraphicSubImage::`vftable'
PUBLIC	?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A ; CSingleton<CResourceManager>::ms_singleton
PUBLIC	??_C@_0BB@PNJLMPJB@CGraphicSubImage@		; `string'
PUBLIC	??_C@_02OJDBNLEE@?5?7@				; `string'
PUBLIC	??_C@_05PHLGJONK@title@				; `string'
PUBLIC	??_C@_07CPCPJPKL@version@			; `string'
PUBLIC	??_C@_05NGOMGBBD@image@				; `string'
PUBLIC	??_C@_03FGFCOCMD@top@				; `string'
PUBLIC	??_C@_05DHJDAOHK@right@				; `string'
PUBLIC	??_C@_06PMMPCIPB@bottom@			; `string'
PUBLIC	??_C@_08LAJAOJDG@subimage@			; `string'
PUBLIC	??_C@_03GJAMENNA@2?40@				; `string'
PUBLIC	??_C@_04HDOCAJNK@?$CFs?$CFs@			; `string'
PUBLIC	??_R4CGraphicSubImage@@6B@			; CGraphicSubImage::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCGraphicSubImage@@@8			; CGraphicSubImage `RTTI Type Descriptor'
PUBLIC	??_R3CGraphicSubImage@@8			; CGraphicSubImage::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphicSubImage@@8			; CGraphicSubImage::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CGraphicSubImage@@8		; CGraphicSubImage::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CGraphicImage@@8			; CGraphicImage::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCGraphicImage@@@8			; CGraphicImage `RTTI Type Descriptor'
PUBLIC	??_R3CGraphicImage@@8				; CGraphicImage::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphicImage@@8				; CGraphicImage::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CResource@@8			; CResource::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCResource@@@8				; CResource `RTTI Type Descriptor'
PUBLIC	??_R3CResource@@8				; CResource::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CResource@@8				; CResource::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CReferenceObject@@8		; CReferenceObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCReferenceObject@@@8			; CReferenceObject `RTTI Type Descriptor'
PUBLIC	??_R3CReferenceObject@@8			; CReferenceObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CReferenceObject@@8			; CReferenceObject::`RTTI Base Class Array'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	___report_rangecheckfailure:PROC
EXTRN	__Init_thread_header:PROC
EXTRN	__Init_thread_abort:PROC
EXTRN	__Init_thread_footer:PROC
EXTRN	___std_terminate:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	___stdio_common_vsprintf:PROC
EXTRN	_strncpy:PROC
EXTRN	__atoi64:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?stl_lowers@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; stl_lowers
EXTRN	??0CMemoryTextFileLoader@@QAE@XZ:PROC		; CMemoryTextFileLoader::CMemoryTextFileLoader
EXTRN	??1CMemoryTextFileLoader@@UAE@XZ:PROC		; CMemoryTextFileLoader::~CMemoryTextFileLoader
EXTRN	?Bind@CMemoryTextFileLoader@@QAEXHPBX@Z:PROC	; CMemoryTextFileLoader::Bind
EXTRN	?GetLineCount@CMemoryTextFileLoader@@QAEKXZ:PROC ; CMemoryTextFileLoader::GetLineCount
EXTRN	?SplitLine@CMemoryTextFileLoader@@QAE_NKPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@PBD@Z:PROC ; CMemoryTextFileLoader::SplitLine
EXTRN	?AddReference@CReferenceObject@@QAEXXZ:PROC	; CReferenceObject::AddReference
EXTRN	?Release@CReferenceObject@@QAEXXZ:PROC		; CReferenceObject::Release
EXTRN	?StringToType@CResource@@SAKPBD@Z:PROC		; CResource::StringToType
EXTRN	?IsEmpty@CResource@@QBE_NXZ:PROC		; CResource::IsEmpty
EXTRN	?IsType@CResource@@QAE_NK@Z:PROC		; CResource::IsType
EXTRN	?OnConstruct@CResource@@MAEXXZ:PROC		; CResource::OnConstruct
EXTRN	?OnSelfDestruct@CResource@@MAEXXZ:PROC		; CResource::OnSelfDestruct
EXTRN	?CreateFromTexturePointer@CGraphicImageTexture@@QAEXPBVCGraphicTexture@@@Z:PROC ; CGraphicImageTexture::CreateFromTexturePointer
EXTRN	?Type@CGraphicImage@@SAKXZ:PROC			; CGraphicImage::Type
EXTRN	??0CGraphicImage@@QAE@PBDK@Z:PROC		; CGraphicImage::CGraphicImage
EXTRN	??1CGraphicImage@@UAE@XZ:PROC			; CGraphicImage::~CGraphicImage
EXTRN	?DestroyDeviceObjects@CGraphicImage@@UAEXXZ:PROC ; CGraphicImage::DestroyDeviceObjects
EXTRN	?GetTexturePointer@CGraphicImage@@QAEPAVCGraphicTexture@@XZ:PROC ; CGraphicImage::GetTexturePointer
EXTRN	?OnIsType@CGraphicImage@@MAE_NK@Z:PROC		; CGraphicImage::OnIsType
EXTRN	??_ECGraphicSubImage@@UAEPAXI@Z:PROC		; CGraphicSubImage::`vector deleting destructor'
EXTRN	?GetResourcePointer@CResourceManager@@QAEPAVCResource@@PBD@Z:PROC ; CResourceManager::GetResourcePointer
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	__Init_thread_epoch:DWORD
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__tls_array:DWORD
EXTRN	__tls_index:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A DD 01H DUP (?) ; CSingleton<CResourceManager>::ms_singleton
_BSS	ENDS
;	COMDAT ?s_type@?1??Type@CGraphicSubImage@@SAKXZ@4KA
_BSS	SEGMENT
?s_type@?1??Type@CGraphicSubImage@@SAKXZ@4KA DD 01H DUP (?) ; `CGraphicSubImage::Type'::`2'::s_type
_BSS	ENDS
;	COMDAT ?$TSS0@?1??Type@CGraphicSubImage@@SAKXZ@4HA
_BSS	SEGMENT
?$TSS0@?1??Type@CGraphicSubImage@@SAKXZ@4HA DD 01H DUP (?) ; `CGraphicSubImage::Type'::`2'::$TSS0
_BSS	ENDS
;	COMDAT ??_R2CReferenceObject@@8
rdata$r	SEGMENT
??_R2CReferenceObject@@8 DD FLAT:??_R1A@?0A@EA@CReferenceObject@@8 ; CReferenceObject::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CReferenceObject@@8
rdata$r	SEGMENT
??_R3CReferenceObject@@8 DD 00H				; CReferenceObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CReferenceObject@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCReferenceObject@@@8
data$rs	SEGMENT
??_R0?AVCReferenceObject@@@8 DD FLAT:??_7type_info@@6B@	; CReferenceObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCReferenceObject@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CReferenceObject@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CReferenceObject@@8 DD FLAT:??_R0?AVCReferenceObject@@@8 ; CReferenceObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CReferenceObject@@8
rdata$r	ENDS
;	COMDAT ??_R2CResource@@8
rdata$r	SEGMENT
??_R2CResource@@8 DD FLAT:??_R1A@?0A@EA@CResource@@8	; CResource::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CReferenceObject@@8
rdata$r	ENDS
;	COMDAT ??_R3CResource@@8
rdata$r	SEGMENT
??_R3CResource@@8 DD 00H				; CResource::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CResource@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCResource@@@8
data$rs	SEGMENT
??_R0?AVCResource@@@8 DD FLAT:??_7type_info@@6B@	; CResource `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCResource@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CResource@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CResource@@8 DD FLAT:??_R0?AVCResource@@@8 ; CResource::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CResource@@8
rdata$r	ENDS
;	COMDAT ??_R2CGraphicImage@@8
rdata$r	SEGMENT
??_R2CGraphicImage@@8 DD FLAT:??_R1A@?0A@EA@CGraphicImage@@8 ; CGraphicImage::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CResource@@8
	DD	FLAT:??_R1A@?0A@EA@CReferenceObject@@8
rdata$r	ENDS
;	COMDAT ??_R3CGraphicImage@@8
rdata$r	SEGMENT
??_R3CGraphicImage@@8 DD 00H				; CGraphicImage::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CGraphicImage@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphicImage@@@8
data$rs	SEGMENT
??_R0?AVCGraphicImage@@@8 DD FLAT:??_7type_info@@6B@	; CGraphicImage `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphicImage@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphicImage@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphicImage@@8 DD FLAT:??_R0?AVCGraphicImage@@@8 ; CGraphicImage::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicImage@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphicSubImage@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphicSubImage@@8 DD FLAT:??_R0?AVCGraphicSubImage@@@8 ; CGraphicSubImage::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicSubImage@@8
rdata$r	ENDS
;	COMDAT ??_R2CGraphicSubImage@@8
rdata$r	SEGMENT
??_R2CGraphicSubImage@@8 DD FLAT:??_R1A@?0A@EA@CGraphicSubImage@@8 ; CGraphicSubImage::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CGraphicImage@@8
	DD	FLAT:??_R1A@?0A@EA@CResource@@8
	DD	FLAT:??_R1A@?0A@EA@CReferenceObject@@8
rdata$r	ENDS
;	COMDAT ??_R3CGraphicSubImage@@8
rdata$r	SEGMENT
??_R3CGraphicSubImage@@8 DD 00H				; CGraphicSubImage::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2CGraphicSubImage@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphicSubImage@@@8
data$rs	SEGMENT
??_R0?AVCGraphicSubImage@@@8 DD FLAT:??_7type_info@@6B@	; CGraphicSubImage `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphicSubImage@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CGraphicSubImage@@6B@
rdata$r	SEGMENT
??_R4CGraphicSubImage@@6B@ DD 00H			; CGraphicSubImage::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCGraphicSubImage@@@8
	DD	FLAT:??_R3CGraphicSubImage@@8
rdata$r	ENDS
;	COMDAT ??_C@_04HDOCAJNK@?$CFs?$CFs@
CONST	SEGMENT
??_C@_04HDOCAJNK@?$CFs?$CFs@ DB '%s%s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03GJAMENNA@2?40@
CONST	SEGMENT
??_C@_03GJAMENNA@2?40@ DB '2.0', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08LAJAOJDG@subimage@
CONST	SEGMENT
??_C@_08LAJAOJDG@subimage@ DB 'subimage', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PMMPCIPB@bottom@
CONST	SEGMENT
??_C@_06PMMPCIPB@bottom@ DB 'bottom', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05DHJDAOHK@right@
CONST	SEGMENT
??_C@_05DHJDAOHK@right@ DB 'right', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03FGFCOCMD@top@
CONST	SEGMENT
??_C@_03FGFCOCMD@top@ DB 'top', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05NGOMGBBD@image@
CONST	SEGMENT
??_C@_05NGOMGBBD@image@ DB 'image', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07CPCPJPKL@version@
CONST	SEGMENT
??_C@_07CPCPJPKL@version@ DB 'version', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05PHLGJONK@title@
CONST	SEGMENT
??_C@_05PHLGJONK@title@ DB 'title', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02OJDBNLEE@?5?7@
CONST	SEGMENT
??_C@_02OJDBNLEE@?5?7@ DB ' ', 09H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@PNJLMPJB@CGraphicSubImage@
CONST	SEGMENT
??_C@_0BB@PNJLMPJB@CGraphicSubImage@ DB 'CGraphicSubImage', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7CGraphicSubImage@@6B@
CONST	SEGMENT
??_7CGraphicSubImage@@6B@ DD FLAT:??_R4CGraphicSubImage@@6B@ ; CGraphicSubImage::`vftable'
	DD	FLAT:??_ECGraphicSubImage@@UAEPAXI@Z
	DD	FLAT:?OnConstruct@CResource@@MAEXXZ
	DD	FLAT:?OnSelfDestruct@CResource@@MAEXXZ
	DD	FLAT:?CreateDeviceObjects@CGraphicSubImage@@UAE_NXZ
	DD	FLAT:?DestroyDeviceObjects@CGraphicImage@@UAEXXZ
	DD	FLAT:?OnLoad@CGraphicSubImage@@MAE_NHPBX@Z
	DD	FLAT:?OnClear@CGraphicSubImage@@MAEXXZ
	DD	FLAT:?OnIsEmpty@CGraphicSubImage@@MBE_NXZ
	DD	FLAT:?OnIsType@CGraphicSubImage@@MAE_NK@Z
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BB@GCADKGJO@map?1set?5too?5long@
CONST	SEGMENT
??_C@_0BB@GCADKGJO@map?1set?5too?5long@ DB 'map/set too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0ABUpiecewise_construct_t@std@@V?$tuple@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0ABUpiecewise_construct_t@std@@V?$tuple@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z$1
__ehfuncinfo$??$?0ABUpiecewise_construct_t@std@@V?$tuple@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0ABUpiecewise_construct_t@std@@V?$tuple@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z$0
__ehfuncinfo$??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@1@@Z$0
__ehfuncinfo$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Try_emplace@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$V@?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@_N@1@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Try_emplace@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$V@?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@_N@1@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$2
__ehfuncinfo$??$_Try_emplace@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$V@?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@_N@1@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Try_emplace@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$V@?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@_N@1@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Try_emplace@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$V@?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@_N@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Try_emplace@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$V@?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@_N@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Try_emplace@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$V@?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@_N@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$1
__ehfuncinfo$??$_Try_emplace@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$V@?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@_N@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Try_emplace@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$V@?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@_N@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@ABV21@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@ABV21@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@ABV21@@Z$1
__ehfuncinfo$??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@ABV21@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@ABV21@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@$$QAV21@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@$$QAV21@@Z$2
__ehfuncinfo$??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@$$QAV21@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@$$QAV21@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$CRef@VCGraphicImage@@@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?OnLoad@CGraphicSubImage@@MAE_NHPBX@Z DD 019930522H
	DD	0cH
	DD	FLAT:__unwindtable$?OnLoad@CGraphicSubImage@@MAE_NHPBX@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?OnLoad@CGraphicSubImage@@MAE_NHPBX@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?OnLoad@CGraphicSubImage@@MAE_NHPBX@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?OnLoad@CGraphicSubImage@@MAE_NHPBX@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?OnLoad@CGraphicSubImage@@MAE_NHPBX@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?OnLoad@CGraphicSubImage@@MAE_NHPBX@Z$37
	DD	02H
	DD	FLAT:__unwindfunclet$?OnLoad@CGraphicSubImage@@MAE_NHPBX@Z$36
	DD	02H
	DD	FLAT:__unwindfunclet$?OnLoad@CGraphicSubImage@@MAE_NHPBX@Z$3
	DD	02H
	DD	FLAT:__unwindfunclet$?OnLoad@CGraphicSubImage@@MAE_NHPBX@Z$4
	DD	02H
	DD	FLAT:__unwindfunclet$?OnLoad@CGraphicSubImage@@MAE_NHPBX@Z$5
	DD	02H
	DD	FLAT:__unwindfunclet$?OnLoad@CGraphicSubImage@@MAE_NHPBX@Z$6
	DD	02H
	DD	FLAT:__unwindfunclet$?OnLoad@CGraphicSubImage@@MAE_NHPBX@Z$7
	DD	02H
	DD	FLAT:__unwindfunclet$?OnLoad@CGraphicSubImage@@MAE_NHPBX@Z$8
	DD	02H
	DD	FLAT:__unwindfunclet$?OnLoad@CGraphicSubImage@@MAE_NHPBX@Z$9
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CGraphicSubImage@@UAE@XZ DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??1CGraphicSubImage@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CGraphicSubImage@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Type@CGraphicSubImage@@SAKXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Type@CGraphicSubImage@@SAKXZ$0
__ehfuncinfo$?Type@CGraphicSubImage@@SAKXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Type@CGraphicSubImage@@SAKXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z PROC ; std::operator<<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 5234 :     const basic_string<_Elem, _Traits, _Alloc>& _Left, const basic_string<_Elem, _Traits, _Alloc>& _Right) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4795 :         return _Traits_compare<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize,

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]

; 2301 :         return _BUF_SIZE <= _Myres;

  00006	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 4795 :         return _Traits_compare<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize,

  0000a	8b 50 10	 mov	 edx, DWORD PTR [eax+16]

; 2293 :         if (_Large_string_engaged()) {

  0000d	72 02		 jb	 SHORT $LN6@operator

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  0000f	8b 00		 mov	 eax, DWORD PTR [eax]
$LN6@operator:

; 4795 :         return _Traits_compare<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize,

  00011	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  00014	56		 push	 esi

; 2301 :         return _BUF_SIZE <= _Myres;

  00015	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H

; 4795 :         return _Traits_compare<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize,

  00019	8b 71 10	 mov	 esi, DWORD PTR [ecx+16]

; 2293 :         if (_Large_string_engaged()) {

  0001c	72 02		 jb	 SHORT $LN11@operator

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  0001e	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN11@operator:

; 4795 :         return _Traits_compare<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize,

  00020	52		 push	 edx
  00021	50		 push	 eax
  00022	56		 push	 esi
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??$_Traits_compare@U?$char_traits@D@std@@@std@@YAHQBDI0I@Z ; std::_Traits_compare<std::char_traits<char> >
  00029	83 c4 10	 add	 esp, 16			; 00000010H

; 5235 :     return _Left.compare(_Right) < 0;

  0002c	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0002f	5e		 pop	 esi

; 5236 : }

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ENDP ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
__Al$ = 8						; size = 4
__Rootnode$ = 12					; size = 4
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >, COMDAT
; _this$ = ecx

; 744  :     void _Erase_tree(_Alnode& _Al, _Nodeptr _Rootnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00005	8b 75 0c	 mov	 esi, DWORD PTR __Rootnode$[ebp]
  00008	8b c1		 mov	 eax, ecx
  0000a	89 45 fc	 mov	 DWORD PTR _this$1$[ebp], eax
  0000d	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00011	75 32		 jne	 SHORT $LN3@Erase_tree
  00013	53		 push	 ebx
  00014	8b 5d 08	 mov	 ebx, DWORD PTR __Al$[ebp]
  00017	57		 push	 edi
$LL2@Erase_tree:

; 746  :             _Erase_tree(_Al, _Rootnode->_Right);

  00018	ff 76 08	 push	 DWORD PTR [esi+8]
  0001b	8b c8		 mov	 ecx, eax
  0001d	53		 push	 ebx
  0001e	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 653  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00023	8b fe		 mov	 edi, esi

; 654  :     _Val         = static_cast<_Other&&>(_New_val);

  00025	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 382  :         allocator_traits<_Alloc>::destroy(_Al, _STD addressof(_Ptr->_Myval));

  00027	8d 4f 10	 lea	 ecx, DWORD PTR [edi+16]
  0002a	e8 00 00 00 00	 call	 ??1?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@XZ
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0002f	6a 40		 push	 64			; 00000040H
  00031	57		 push	 edi
  00032	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00037	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0003a	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0003d	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00041	74 d5		 je	 SHORT $LL2@Erase_tree
  00043	5f		 pop	 edi
  00044	5b		 pop	 ebx
$LN3@Erase_tree:
  00045	5e		 pop	 esi

; 747  :             _Alnode::value_type::_Freenode(_Al, _STD exchange(_Rootnode, _Rootnode->_Left));
; 748  :         }
; 749  :     }

  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c2 08 00	 ret	 8
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >::~_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >, COMDAT
; _this$ = ecx

; 1017 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN10@Tree_temp_

; 255  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 40		 push	 64			; 00000040H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN10@Tree_temp_:
  00012	c3		 ret	 0
??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >::~_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >, COMDAT
; _this$ = ecx

; 1017 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN8@Alloc_cons

; 255  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 40		 push	 64			; 00000040H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN8@Alloc_cons:

; 1018 :             _Al.deallocate(_Ptr, 1);
; 1019 :         }
; 1020 :     }

  00012	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Find_lower_bound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 1609 :     _Tree_find_result<_Nodeptr> _Find_lower_bound(const _Keyty& _Keyval) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1610 :         const auto _Scary = _Get_scary();
; 1611 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  0000a	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  0000d	89 37		 mov	 DWORD PTR [edi], esi

; 1612 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1613 :         while (!_Trynode->_Isnil) {

  0000f	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00013	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
  0001a	89 47 08	 mov	 DWORD PTR [edi+8], eax
  0001d	75 32		 jne	 SHORT $LN12@Find_lower
  0001f	53		 push	 ebx
  00020	8b 5d 0c	 mov	 ebx, DWORD PTR __Keyval$[ebp]
$LL2@Find_lower:

; 1615 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

  00023	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
  00026	89 37		 mov	 DWORD PTR [edi], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef

; 143  :         return _Left < _Right;

  00028	53		 push	 ebx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
  0002f	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1615 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

  00032	84 c0		 test	 al, al
  00034	74 07		 je	 SHORT $LN4@Find_lower

; 1616 :                 _Result._Location._Child = _Tree_child::_Right;
; 1617 :                 _Trynode                 = _Trynode->_Right;

  00036	8b 76 08	 mov	 esi, DWORD PTR [esi+8]
  00039	33 c0		 xor	 eax, eax

; 1618 :             } else {

  0003b	eb 0a		 jmp	 SHORT $LN5@Find_lower
$LN4@Find_lower:

; 1619 :                 _Result._Location._Child = _Tree_child::_Left;
; 1620 :                 _Result._Bound           = _Trynode;

  0003d	89 77 08	 mov	 DWORD PTR [edi+8], esi

; 1621 :                 _Trynode                 = _Trynode->_Left;

  00040	b8 01 00 00 00	 mov	 eax, 1
  00045	8b 36		 mov	 esi, DWORD PTR [esi]
$LN5@Find_lower:

; 1612 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1613 :         while (!_Trynode->_Isnil) {

  00047	89 47 04	 mov	 DWORD PTR [edi+4], eax
  0004a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0004e	74 d3		 je	 SHORT $LL2@Find_lower

; 1622 :             }
; 1623 :         }
; 1624 : 
; 1625 :         return _Result;

  00050	5b		 pop	 ebx
$LN12@Find_lower:

; 1626 :     }

  00051	8b c7		 mov	 eax, edi
  00053	5f		 pop	 edi
  00054	5e		 pop	 esi
  00055	5d		 pop	 ebp
  00056	c2 08 00	 ret	 8
??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Find_lower_bound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ??$_Traits_compare@U?$char_traits@D@std@@@std@@YAHQBDI0I@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Left_size$ = 12					; size = 4
__Right$ = 16						; size = 4
__Right_size$ = 20					; size = 4
??$_Traits_compare@U?$char_traits@D@std@@@std@@YAHQBDI0I@Z PROC ; std::_Traits_compare<std::char_traits<char> >, COMDAT

; 600  :     _In_reads_(_Right_size) const _Traits_ptr_t<_Traits> _Right, const size_t _Right_size) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 395  :         return __builtin_memcmp(_First1, _First2, _Count);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Left$[ebp]

; 600  :     _In_reads_(_Right_size) const _Traits_ptr_t<_Traits> _Right, const size_t _Right_size) noexcept {

  00006	53		 push	 ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 66   :     return _Right < _Left ? _Right : _Left;

  00007	8b 5d 14	 mov	 ebx, DWORD PTR __Right_size$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 600  :     _In_reads_(_Right_size) const _Traits_ptr_t<_Traits> _Right, const size_t _Right_size) noexcept {

  0000a	56		 push	 esi

; 395  :         return __builtin_memcmp(_First1, _First2, _Count);

  0000b	8b 75 10	 mov	 esi, DWORD PTR __Right$[ebp]

; 600  :     _In_reads_(_Right_size) const _Traits_ptr_t<_Traits> _Right, const size_t _Right_size) noexcept {

  0000e	57		 push	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 66   :     return _Right < _Left ? _Right : _Left;

  0000f	8b 7d 0c	 mov	 edi, DWORD PTR __Left_size$[ebp]
  00012	3b df		 cmp	 ebx, edi
  00014	8b cf		 mov	 ecx, edi
  00016	0f 42 cb	 cmovb	 ecx, ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 395  :         return __builtin_memcmp(_First1, _First2, _Count);

  00019	83 e9 04	 sub	 ecx, 4
  0001c	72 13		 jb	 SHORT $LN12@Traits_com
  0001e	66 90		 npad	 2
$LL13@Traits_com:
  00020	8b 02		 mov	 eax, DWORD PTR [edx]
  00022	3b 06		 cmp	 eax, DWORD PTR [esi]
  00024	75 10		 jne	 SHORT $LN11@Traits_com
  00026	83 c2 04	 add	 edx, 4
  00029	83 c6 04	 add	 esi, 4
  0002c	83 e9 04	 sub	 ecx, 4
  0002f	73 ef		 jae	 SHORT $LL13@Traits_com
$LN12@Traits_com:
  00031	83 f9 fc	 cmp	 ecx, -4			; fffffffcH
  00034	74 34		 je	 SHORT $LN10@Traits_com
$LN11@Traits_com:
  00036	8a 02		 mov	 al, BYTE PTR [edx]
  00038	3a 06		 cmp	 al, BYTE PTR [esi]
  0003a	75 27		 jne	 SHORT $LN14@Traits_com
  0003c	83 f9 fd	 cmp	 ecx, -3			; fffffffdH
  0003f	74 29		 je	 SHORT $LN10@Traits_com
  00041	8a 42 01	 mov	 al, BYTE PTR [edx+1]
  00044	3a 46 01	 cmp	 al, BYTE PTR [esi+1]
  00047	75 1a		 jne	 SHORT $LN14@Traits_com
  00049	83 f9 fe	 cmp	 ecx, -2			; fffffffeH
  0004c	74 1c		 je	 SHORT $LN10@Traits_com
  0004e	8a 42 02	 mov	 al, BYTE PTR [edx+2]
  00051	3a 46 02	 cmp	 al, BYTE PTR [esi+2]
  00054	75 0d		 jne	 SHORT $LN14@Traits_com
  00056	83 f9 ff	 cmp	 ecx, -1
  00059	74 0f		 je	 SHORT $LN10@Traits_com
  0005b	8a 42 03	 mov	 al, BYTE PTR [edx+3]
  0005e	3a 46 03	 cmp	 al, BYTE PTR [esi+3]
  00061	74 07		 je	 SHORT $LN10@Traits_com
$LN14@Traits_com:
  00063	1b c0		 sbb	 eax, eax
  00065	83 c8 01	 or	 eax, 1
  00068	eb 02		 jmp	 SHORT $LN15@Traits_com
$LN10@Traits_com:
  0006a	33 c0		 xor	 eax, eax
$LN15@Traits_com:

; 601  :     // compare [_Left, _Left + _Left_size) to [_Right, _Right + _Right_size) using _Traits
; 602  :     const int _Ans = _Traits::compare(_Left, _Right, (_STD min)(_Left_size, _Right_size));
; 603  : 
; 604  :     if (_Ans != 0) {

  0006c	85 c0		 test	 eax, eax
  0006e	75 10		 jne	 SHORT $LN1@Traits_com

; 605  :         return _Ans;
; 606  :     }
; 607  : 
; 608  :     if (_Left_size < _Right_size) {

  00070	3b df		 cmp	 ebx, edi
  00072	76 08		 jbe	 SHORT $LN16@Traits_com

; 613  :         return 1;
; 614  :     }
; 615  : 
; 616  :     return 0;
; 617  : }

  00074	5f		 pop	 edi
  00075	5e		 pop	 esi
  00076	83 c8 ff	 or	 eax, -1
  00079	5b		 pop	 ebx
  0007a	5d		 pop	 ebp
  0007b	c3		 ret	 0
$LN16@Traits_com:

; 609  :         return -1;
; 610  :     }
; 611  : 
; 612  :     if (_Left_size > _Right_size) {

  0007c	1b c0		 sbb	 eax, eax
  0007e	f7 d8		 neg	 eax
$LN1@Traits_com:

; 613  :         return 1;
; 614  :     }
; 615  : 
; 616  :     return 0;
; 617  : }

  00080	5f		 pop	 edi
  00081	5e		 pop	 esi
  00082	5b		 pop	 ebx
  00083	5d		 pop	 ebp
  00084	c3		 ret	 0
??$_Traits_compare@U?$char_traits@D@std@@@std@@YAHQBDI0I@Z ENDP ; std::_Traits_compare<std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??1?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@XZ PROC ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::~pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 4e 2c	 mov	 ecx, DWORD PTR [esi+44]
  00006	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  00009	72 28		 jb	 SHORT $LN15@pair
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0000e	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0000f	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00015	72 12		 jb	 SHORT $LN25@pair

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00017	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001a	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001d	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001f	83 c0 fc	 add	 eax, -4			; fffffffcH
  00022	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00025	77 60		 ja	 SHORT $LN50@pair

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00027	8b c2		 mov	 eax, edx
$LN25@pair:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00029	51		 push	 ecx
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00030	83 c4 08	 add	 esp, 8
$LN15@pair:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5019 :         _My_data._Mysize = 0;

  00033	c7 46 28 00 00
	00 00		 mov	 DWORD PTR [esi+40], 0

; 5020 :         _My_data._Myres  = _BUF_SIZE - 1;

  0003a	c7 46 2c 0f 00
	00 00		 mov	 DWORD PTR [esi+44], 15	; 0000000fH

; 5021 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5022 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00041	c6 46 18 00	 mov	 BYTE PTR [esi+24], 0

; 2301 :         return _BUF_SIZE <= _Myres;

  00045	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00048	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  0004b	72 27		 jb	 SHORT $LN43@pair
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0004d	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0004f	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00050	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00056	72 12		 jb	 SHORT $LN53@pair

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00058	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0005b	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0005e	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00060	83 c0 fc	 add	 eax, -4			; fffffffcH
  00063	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00066	77 1f		 ja	 SHORT $LN50@pair

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00068	8b c2		 mov	 eax, edx
$LN53@pair:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0006a	51		 push	 ecx
  0006b	50		 push	 eax
  0006c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00071	83 c4 08	 add	 esp, 8
$LN43@pair:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5019 :         _My_data._Mysize = 0;

  00074	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 5020 :         _My_data._Myres  = _BUF_SIZE - 1;

  0007b	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 5021 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5022 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00082	c6 06 00	 mov	 BYTE PTR [esi], 0
  00085	5e		 pop	 esi
  00086	c3		 ret	 0
$LN50@pair:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00087	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN58@pair:
  0008c	cc		 int	 3
??1?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@XZ ENDP ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::~pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NQBDABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NQBDABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z PROC ; std::operator==<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 5212 : _NODISCARD bool operator==(_In_z_ const _Elem* const _Left, const basic_string<_Elem, _Traits, _Alloc>& _Right) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 5213 :     return _Right._Equal(_Left);

  00003	ff 75 08	 push	 DWORD PTR __Left$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00009	e8 00 00 00 00	 call	 ?_Equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NQBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Equal

; 5214 : }

  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NQBDABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ENDP ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z PROC ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 5228 : _NODISCARD bool operator!=(const basic_string<_Elem, _Traits, _Alloc>& _Left, _In_z_ const _Elem* const _Right) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 5195 :     return _Left._Equal(_Right);

  00003	ff 75 0c	 push	 DWORD PTR __Right$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  00009	e8 00 00 00 00	 call	 ?_Equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NQBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Equal

; 5229 :     return !(_Left == _Right);

  0000e	34 01		 xor	 al, 1

; 5230 : }

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ENDP ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??1?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@@std@@QAE@XZ PROC ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::~map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 754  :         _Erase_tree(_Al, _Myhead->_Parent);

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	ff 70 04	 push	 DWORD PTR [eax+4]
  00008	56		 push	 esi
  00009	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0000e	6a 40		 push	 64			; 00000040H
  00010	ff 36		 push	 DWORD PTR [esi]
  00012	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00017	83 c4 08	 add	 esp, 8
  0001a	5e		 pop	 esi
  0001b	c3		 ret	 0
??1?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@@std@@QAE@XZ ENDP ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::~map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
;	COMDAT ??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@$$QAV21@@Z
_TEXT	SEGMENT
__Loc$3 = -36						; size = 12
$T4 = -24						; size = 8
_this$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Keyval$ = 8						; size = 4
??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@$$QAV21@@Z PROC ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::operator[], COMDAT
; _this$ = ecx

; 173  :     mapped_type& operator[](key_type&& _Keyval) { // find element matching _Keyval or insert value-initialized value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@$$QAV21@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	89 4d f0	 mov	 DWORD PTR _this$1$[ebp], ecx

; 196  :         const auto _Loc = _Mybase::_Find_lower_bound(_Keyval);

  0002a	8b 7d 08	 mov	 edi, DWORD PTR __Keyval$[ebp]
  0002d	8d 45 dc	 lea	 eax, DWORD PTR __Loc$3[ebp]
  00030	57		 push	 edi
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 ??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Find_lower_bound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00037	8b 75 e4	 mov	 esi, DWORD PTR __Loc$3[ebp+8]
  0003a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0003e	75 15		 jne	 SHORT $LN4@operator
  00040	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef

; 143  :         return _Left < _Right;

  00043	50		 push	 eax
  00044	57		 push	 edi
  00045	e8 00 00 00 00	 call	 ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
  0004a	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0004d	84 c0		 test	 al, al
  0004f	0f 84 9c 00 00
	00		 je	 $LN3@operator
$LN4@operator:

; 1629 :         if (max_size() == _Get_scary()->_Mysize) {

  00055	8b 45 f0	 mov	 eax, DWORD PTR _this$1$[ebp]
  00058	81 78 04 ff ff
	ff 03		 cmp	 DWORD PTR [eax+4], 67108863 ; 03ffffffH
  0005f	0f 84 a2 00 00
	00		 je	 $LN145@operator
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map

; 204  :         const auto _Inserted = _Tree_temp_node<_Alnode>(_Mybase::_Getal(), _Scary->_Myhead, piecewise_construct,

  00065	8b 30		 mov	 esi, DWORD PTR [eax]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1005 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  00067	89 45 e8	 mov	 DWORD PTR $T4[ebp], eax

; 77   :         return ::operator new(_Bytes);

  0006a	6a 40		 push	 64			; 00000040H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 785  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  0006c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1012 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  00073	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T4[ebp+4], 0

; 77   :         return ::operator new(_Bytes);

  0007a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map

; 210  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  0007f	8b 4d f0	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00082	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  00085	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00088	0f 11 40 10	 movups	 XMMWORD PTR [eax+16], xmm0

; 2349 :     size_type _Mysize = 0; // current length of string

  0008c	c7 40 20 00 00
	00 00		 mov	 DWORD PTR [eax+32], 0

; 2350 :     size_type _Myres  = 0; // current storage reserved for string

  00093	c7 40 24 00 00
	00 00		 mov	 DWORD PTR [eax+36], 0

; 3140 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  0009a	0f 10 07	 movups	 xmm0, XMMWORD PTR [edi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map

; 210  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  0009d	50		 push	 eax
  0009e	ff 75 e0	 push	 DWORD PTR __Loc$3[ebp+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3140 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  000a1	0f 11 40 10	 movups	 XMMWORD PTR [eax+16], xmm0
  000a5	f3 0f 7e 47 10	 movq	 xmm0, QWORD PTR [edi+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map

; 210  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  000aa	ff 75 dc	 push	 DWORD PTR __Loc$3[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3140 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  000ad	66 0f d6 40 20	 movq	 QWORD PTR [eax+32], xmm0
  000b2	0f 57 c0	 xorps	 xmm0, xmm0

; 4998 :         _My_data._Mysize = 0;

  000b5	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 4999 :         _My_data._Myres  = _BUF_SIZE - 1;

  000bc	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH

; 5000 :         _My_data._Activate_SSO_buffer();
; 5001 : 
; 5002 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5003 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  000c3	c6 07 00	 mov	 BYTE PTR [edi], 0

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  000c6	0f 11 40 28	 movups	 XMMWORD PTR [eax+40], xmm0

; 4998 :         _My_data._Mysize = 0;

  000ca	c7 40 38 00 00
	00 00		 mov	 DWORD PTR [eax+56], 0

; 4999 :         _My_data._Myres  = _BUF_SIZE - 1;

  000d1	c7 40 3c 0f 00
	00 00		 mov	 DWORD PTR [eax+60], 15	; 0000000fH

; 5000 :         _My_data._Activate_SSO_buffer();
; 5001 : 
; 5002 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5003 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  000d8	c6 40 28 00	 mov	 BYTE PTR [eax+40], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 808  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  000dc	89 30		 mov	 DWORD PTR [eax], esi

; 809  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  000de	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 810  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  000e1	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 811  :         this->_Ptr->_Color = _Red;

  000e4	66 c7 40 0c 00
	00		 mov	 WORD PTR [eax+12], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map

; 210  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  000ea	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Insert_node
  000ef	8b f0		 mov	 esi, eax
$LN3@operator:

; 174  :         return _Try_emplace(_STD move(_Keyval)).first->_Myval.second;

  000f1	8d 46 28	 lea	 eax, DWORD PTR [esi+40]

; 175  :     }

  000f4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000f7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000fe	59		 pop	 ecx
  000ff	5f		 pop	 edi
  00100	5e		 pop	 esi
  00101	8b e5		 mov	 esp, ebp
  00103	5d		 pop	 ebp
  00104	c2 04 00	 ret	 4
$LN145@operator:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1630 :             _Throw_tree_length_error();

  00107	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN143@operator:
  0010c	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@$$QAV21@@Z$2:
  00000	8d 4d e8	 lea	 ecx, DWORD PTR $T4[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@$$QAV21@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@$$QAV21@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@$$QAV21@@Z ENDP ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::operator[]
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@2@QAU32@@Z
_TEXT	SEGMENT
__Head$1$ = -4						; size = 4
__Loc$ = 8						; size = 8
__Newnode$ = 16						; size = 4
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@2@QAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Insert_node, COMDAT
; _this$ = ecx

; 646  :     _Nodeptr _Insert_node(const _Tree_id<_Nodeptr> _Loc, const _Nodeptr _Newnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 647  :         ++_Mysize;
; 648  :         const auto _Head  = _Myhead;
; 649  :         _Newnode->_Parent = _Loc._Parent;

  00004	8b 55 08	 mov	 edx, DWORD PTR __Loc$[ebp]
  00007	53		 push	 ebx
  00008	8b d9		 mov	 ebx, ecx
  0000a	57		 push	 edi
  0000b	8b 7d 10	 mov	 edi, DWORD PTR __Newnode$[ebp]
  0000e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00010	ff 43 04	 inc	 DWORD PTR [ebx+4]
  00013	89 45 fc	 mov	 DWORD PTR __Head$1$[ebp], eax
  00016	89 57 04	 mov	 DWORD PTR [edi+4], edx

; 650  :         if (_Loc._Parent == _Head) { // first node in tree, just set head values

  00019	3b d0		 cmp	 edx, eax
  0001b	75 16		 jne	 SHORT $LN5@Insert_nod

; 651  :             _Head->_Left     = _Newnode;

  0001d	89 38		 mov	 DWORD PTR [eax], edi

; 652  :             _Head->_Parent   = _Newnode;

  0001f	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 653  :             _Head->_Right    = _Newnode;

  00022	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 712  :         return _Newnode;
; 713  :     }

  00025	8b c7		 mov	 eax, edi
  00027	c6 47 0c 01	 mov	 BYTE PTR [edi+12], 1
  0002b	5f		 pop	 edi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 0c 00	 ret	 12			; 0000000cH
$LN5@Insert_nod:

; 654  :             _Newnode->_Color = _Black; // the root is black
; 655  :             return _Newnode;
; 656  :         }
; 657  : 
; 658  :         _STL_INTERNAL_CHECK(_Loc._Child != _Tree_child::_Unused);
; 659  :         if (_Loc._Child == _Tree_child::_Right) { // add to right of _Loc._Parent

  00033	83 7d 0c 00	 cmp	 DWORD PTR __Loc$[ebp+4], 0
  00037	75 0d		 jne	 SHORT $LN6@Insert_nod

; 660  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Right->_Isnil);
; 661  :             _Loc._Parent->_Right = _Newnode;

  00039	89 7a 08	 mov	 DWORD PTR [edx+8], edi

; 662  :             if (_Loc._Parent == _Head->_Right) { // remember rightmost node

  0003c	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0003f	75 0d		 jne	 SHORT $LN9@Insert_nod

; 663  :                 _Head->_Right = _Newnode;

  00041	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 664  :             }
; 665  :         } else { // add to left of _Loc._Parent

  00044	eb 08		 jmp	 SHORT $LN9@Insert_nod
$LN6@Insert_nod:

; 666  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Left->_Isnil);
; 667  :             _Loc._Parent->_Left = _Newnode;

  00046	89 3a		 mov	 DWORD PTR [edx], edi

; 668  :             if (_Loc._Parent == _Head->_Left) { // remember leftmost node

  00048	3b 10		 cmp	 edx, DWORD PTR [eax]
  0004a	75 02		 jne	 SHORT $LN9@Insert_nod

; 669  :                 _Head->_Left = _Newnode;

  0004c	89 38		 mov	 DWORD PTR [eax], edi
$LN9@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  0004e	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00051	8b c7		 mov	 eax, edi
  00053	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00057	0f 85 7d 01 00
	00		 jne	 $LN3@Insert_nod
  0005d	56		 push	 esi
  0005e	66 90		 npad	 2
$LL2@Insert_nod:

; 674  :             if (_Pnode->_Parent == _Pnode->_Parent->_Parent->_Left) { // fixup red-red in left subtree

  00060	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00063	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  00066	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00068	3b d1		 cmp	 edx, ecx
  0006a	0f 85 aa 00 00
	00		 jne	 $LN10@Insert_nod

; 675  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Right;

  00070	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 676  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  00073	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00077	0f 84 a3 00 00
	00		 je	 $LN54@Insert_nod

; 677  :                     _Pnode->_Parent->_Color          = _Black;
; 678  :                     _Parent_sibling->_Color          = _Black;
; 679  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 680  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 681  :                 } else { // parent's sibling has red and black children
; 682  :                     if (_Pnode == _Pnode->_Parent->_Right) { // rotate right child to left

  0007d	8b 72 08	 mov	 esi, DWORD PTR [edx+8]
  00080	3b c6		 cmp	 eax, esi
  00082	75 37		 jne	 SHORT $LN51@Insert_nod

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00084	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 683  :                         _Pnode = _Pnode->_Parent;

  00086	8b c2		 mov	 eax, edx

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00088	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 463  : 
; 464  :         if (!_Pnode->_Left->_Isnil) {

  0008b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0008d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00091	75 03		 jne	 SHORT $LN34@Insert_nod

; 465  :             _Pnode->_Left->_Parent = _Wherenode;

  00093	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN34@Insert_nod:

; 466  :         }
; 467  : 
; 468  :         _Pnode->_Parent = _Wherenode->_Parent;

  00096	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00099	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 469  : 
; 470  :         if (_Wherenode == _Myhead->_Parent) {

  0009c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0009e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  000a1	75 05		 jne	 SHORT $LN35@Insert_nod

; 471  :             _Myhead->_Parent = _Pnode;

  000a3	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  000a6	eb 0e		 jmp	 SHORT $LN38@Insert_nod
$LN35@Insert_nod:

; 472  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  000a8	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000ab	3b 01		 cmp	 eax, DWORD PTR [ecx]
  000ad	75 04		 jne	 SHORT $LN37@Insert_nod

; 473  :             _Wherenode->_Parent->_Left = _Pnode;

  000af	89 31		 mov	 DWORD PTR [ecx], esi

; 474  :         } else {

  000b1	eb 03		 jmp	 SHORT $LN38@Insert_nod
$LN37@Insert_nod:

; 475  :             _Wherenode->_Parent->_Right = _Pnode;

  000b3	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN38@Insert_nod:

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;

  000b6	89 06		 mov	 DWORD PTR [esi], eax

; 479  :         _Wherenode->_Parent = _Pnode;

  000b8	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN51@Insert_nod:

; 684  :                         _Lrotate(_Pnode);
; 685  :                     }
; 686  : 
; 687  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  000bb	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000be	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 688  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  000c2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000c5	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000c8	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 689  :                     _Rrotate(_Pnode->_Parent->_Parent);

  000cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000cf	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 483  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  000d2	8b 32		 mov	 esi, DWORD PTR [edx]

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  000d4	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000d7	89 0a		 mov	 DWORD PTR [edx], ecx

; 485  : 
; 486  :         if (!_Pnode->_Right->_Isnil) {

  000d9	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000dc	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  000e0	75 03		 jne	 SHORT $LN20@Insert_nod

; 487  :             _Pnode->_Right->_Parent = _Wherenode;

  000e2	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN20@Insert_nod:

; 488  :         }
; 489  : 
; 490  :         _Pnode->_Parent = _Wherenode->_Parent;

  000e5	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000e8	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 491  : 
; 492  :         if (_Wherenode == _Myhead->_Parent) {

  000eb	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  000ed	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  000f0	75 0b		 jne	 SHORT $LN21@Insert_nod

; 493  :             _Myhead->_Parent = _Pnode;

  000f2	89 71 04	 mov	 DWORD PTR [ecx+4], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  000f5	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  000f8	e9 cc 00 00 00	 jmp	 $LN53@Insert_nod
$LN21@Insert_nod:

; 494  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  000fd	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00100	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00103	75 0b		 jne	 SHORT $LN23@Insert_nod

; 495  :             _Wherenode->_Parent->_Right = _Pnode;

  00105	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00108	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  0010b	e9 b9 00 00 00	 jmp	 $LN53@Insert_nod
$LN23@Insert_nod:

; 497  :             _Wherenode->_Parent->_Left = _Pnode;

  00110	89 31		 mov	 DWORD PTR [ecx], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00112	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  00115	e9 af 00 00 00	 jmp	 $LN53@Insert_nod
$LN10@Insert_nod:

; 692  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Left;
; 693  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  0011a	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  0011e	75 1d		 jne	 SHORT $LN15@Insert_nod
$LN54@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  00120	c6 42 0c 01	 mov	 BYTE PTR [edx+12], 1
  00124	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1
  00128	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0012b	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0012e	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
  00132	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00135	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00138	e9 8f 00 00 00	 jmp	 $LN32@Insert_nod
$LN15@Insert_nod:

; 694  :                     _Pnode->_Parent->_Color          = _Black;
; 695  :                     _Parent_sibling->_Color          = _Black;
; 696  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 697  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 698  :                 } else { // parent's sibling has red and black children
; 699  :                     if (_Pnode == _Pnode->_Parent->_Left) { // rotate left child to right

  0013d	8b 32		 mov	 esi, DWORD PTR [edx]
  0013f	3b c6		 cmp	 eax, esi
  00141	75 3a		 jne	 SHORT $LN46@Insert_nod

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  00143	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 700  :                         _Pnode = _Pnode->_Parent;

  00146	8b c2		 mov	 eax, edx

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  00148	89 08		 mov	 DWORD PTR [eax], ecx

; 485  : 
; 486  :         if (!_Pnode->_Right->_Isnil) {

  0014a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0014d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00151	75 03		 jne	 SHORT $LN41@Insert_nod

; 487  :             _Pnode->_Right->_Parent = _Wherenode;

  00153	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN41@Insert_nod:

; 488  :         }
; 489  : 
; 490  :         _Pnode->_Parent = _Wherenode->_Parent;

  00156	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00159	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 491  : 
; 492  :         if (_Wherenode == _Myhead->_Parent) {

  0015c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0015e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00161	75 05		 jne	 SHORT $LN42@Insert_nod

; 493  :             _Myhead->_Parent = _Pnode;

  00163	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  00166	eb 0f		 jmp	 SHORT $LN45@Insert_nod
$LN42@Insert_nod:

; 494  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00168	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0016b	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  0016e	75 05		 jne	 SHORT $LN44@Insert_nod

; 495  :             _Wherenode->_Parent->_Right = _Pnode;

  00170	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 496  :         } else {

  00173	eb 02		 jmp	 SHORT $LN45@Insert_nod
$LN44@Insert_nod:

; 497  :             _Wherenode->_Parent->_Left = _Pnode;

  00175	89 31		 mov	 DWORD PTR [ecx], esi
$LN45@Insert_nod:

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00177	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 501  :         _Wherenode->_Parent = _Pnode;

  0017a	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN46@Insert_nod:

; 701  :                         _Rrotate(_Pnode);
; 702  :                     }
; 703  : 
; 704  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  0017d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00180	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 705  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  00184	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00187	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0018a	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 706  :                     _Lrotate(_Pnode->_Parent->_Parent);

  0018e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00191	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 461  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  00194	8b 72 08	 mov	 esi, DWORD PTR [edx+8]

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00197	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00199	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 463  : 
; 464  :         if (!_Pnode->_Left->_Isnil) {

  0019c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0019e	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  001a2	75 03		 jne	 SHORT $LN27@Insert_nod

; 465  :             _Pnode->_Left->_Parent = _Wherenode;

  001a4	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN27@Insert_nod:

; 466  :         }
; 467  : 
; 468  :         _Pnode->_Parent = _Wherenode->_Parent;

  001a7	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001aa	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 469  : 
; 470  :         if (_Wherenode == _Myhead->_Parent) {

  001ad	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  001af	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  001b2	75 05		 jne	 SHORT $LN28@Insert_nod

; 471  :             _Myhead->_Parent = _Pnode;

  001b4	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  001b7	eb 0e		 jmp	 SHORT $LN31@Insert_nod
$LN28@Insert_nod:

; 472  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  001b9	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001bc	3b 11		 cmp	 edx, DWORD PTR [ecx]
  001be	75 04		 jne	 SHORT $LN30@Insert_nod

; 473  :             _Wherenode->_Parent->_Left = _Pnode;

  001c0	89 31		 mov	 DWORD PTR [ecx], esi

; 474  :         } else {

  001c2	eb 03		 jmp	 SHORT $LN31@Insert_nod
$LN30@Insert_nod:

; 475  :             _Wherenode->_Parent->_Right = _Pnode;

  001c4	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN31@Insert_nod:

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;

  001c7	89 16		 mov	 DWORD PTR [esi], edx
$LN53@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  001c9	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN32@Insert_nod:
  001cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001cf	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  001d3	0f 84 87 fe ff
	ff		 je	 $LL2@Insert_nod
  001d9	5e		 pop	 esi
$LN3@Insert_nod:

; 707  :                 }
; 708  :             }
; 709  :         }
; 710  : 
; 711  :         _Head->_Parent->_Color = _Black; // root is always black

  001da	8b 45 fc	 mov	 eax, DWORD PTR __Head$1$[ebp]
  001dd	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001e0	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 712  :         return _Newnode;
; 713  :     }

  001e4	8b c7		 mov	 eax, edi
  001e6	5f		 pop	 edi
  001e7	5b		 pop	 ebx
  001e8	8b e5		 mov	 esp, ebp
  001ea	5d		 pop	 ebp
  001eb	c2 0c 00	 ret	 12			; 0000000cH
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@2@QAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Insert_node
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCGraphicSubImage@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCGraphicSubImage@@UAEPAXI@Z PROC			; CGraphicSubImage::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CGraphicSubImage@@UAE@XZ ; CGraphicSubImage::~CGraphicSubImage
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 78		 push	 120			; 00000078H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCGraphicSubImage@@UAEPAXI@Z ENDP			; CGraphicSubImage::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp
;	COMDAT ?OnIsType@CGraphicSubImage@@MAE_NK@Z
_TEXT	SEGMENT
_type$ = 8						; size = 4
?OnIsType@CGraphicSubImage@@MAE_NK@Z PROC		; CGraphicSubImage::OnIsType, COMDAT
; _this$ = ecx

; 163  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 164  : 	if (CGraphicSubImage::Type() == type)

  00006	e8 00 00 00 00	 call	 ?Type@CGraphicSubImage@@SAKXZ ; CGraphicSubImage::Type
  0000b	8b 55 08	 mov	 edx, DWORD PTR _type$[ebp]
  0000e	3b c2		 cmp	 eax, edx
  00010	75 07		 jne	 SHORT $LN2@OnIsType

; 165  : 	{
; 166  : 		return true;

  00012	b0 01		 mov	 al, 1
  00014	5e		 pop	 esi

; 170  : }

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
$LN2@OnIsType:

; 167  : 	}
; 168  : 
; 169  : 	return CGraphicImage::OnIsType(type);

  00019	52		 push	 edx
  0001a	8b ce		 mov	 ecx, esi
  0001c	e8 00 00 00 00	 call	 ?OnIsType@CGraphicImage@@MAE_NK@Z ; CGraphicImage::OnIsType
  00021	5e		 pop	 esi

; 170  : }

  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
?OnIsType@CGraphicSubImage@@MAE_NK@Z ENDP		; CGraphicSubImage::OnIsType
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ref.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp
;	COMDAT ?OnIsEmpty@CGraphicSubImage@@MBE_NXZ
_TEXT	SEGMENT
?OnIsEmpty@CGraphicSubImage@@MBE_NXZ PROC		; CGraphicSubImage::OnIsEmpty, COMDAT
; _this$ = ecx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ref.h

; 62   : 		return m_pObject == NULL ? true : false;

  00000	8b 49 74	 mov	 ecx, DWORD PTR [ecx+116]
  00003	85 c9		 test	 ecx, ecx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp

; 153  : 	if (!m_roImage.IsNull())

  00005	74 0b		 je	 SHORT $LN3@OnIsEmpty

; 154  : 		if (!m_roImage->IsEmpty())

  00007	e8 00 00 00 00	 call	 ?IsEmpty@CResource@@QBE_NXZ ; CResource::IsEmpty
  0000c	84 c0		 test	 al, al
  0000e	0f 95 c0	 setne	 al

; 160  : }

  00011	c3		 ret	 0
$LN3@OnIsEmpty:

; 155  : 		{
; 156  : 			return false;
; 157  : 		}
; 158  : 
; 159  : 	return true;

  00012	b0 01		 mov	 al, 1

; 160  : }

  00014	c3		 ret	 0
?OnIsEmpty@CGraphicSubImage@@MBE_NXZ ENDP		; CGraphicSubImage::OnIsEmpty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ref.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp
;	COMDAT ?OnClear@CGraphicSubImage@@MAEXXZ
_TEXT	SEGMENT
?OnClear@CGraphicSubImage@@MAEXXZ PROC			; CGraphicSubImage::OnClear, COMDAT
; _this$ = ecx

; 146  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ref.h

; 67   : 		CReferenceObject* pOldObject = m_pObject;

  00003	8b 4e 74	 mov	 ecx, DWORD PTR [esi+116]

; 68   : 
; 69   : 		m_pObject = pObject;

  00006	c7 46 74 00 00
	00 00		 mov	 DWORD PTR [esi+116], 0

; 70   : 
; 71   : 		if (m_pObject)
; 72   : 		{
; 73   : 			m_pObject->AddReference();
; 74   : 		}
; 75   : 
; 76   : 		if (pOldObject)

  0000d	85 c9		 test	 ecx, ecx
  0000f	74 05		 je	 SHORT $LN7@OnClear

; 77   : 		{
; 78   : 			pOldObject->Release();

  00011	e8 00 00 00 00	 call	 ?Release@CReferenceObject@@QAEXXZ ; CReferenceObject::Release
$LN7@OnClear:
  00016	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp

; 148  : 	memset(&m_rect, 0, sizeof(m_rect));

  00019	0f 11 46 60	 movups	 XMMWORD PTR [esi+96], xmm0
  0001d	5e		 pop	 esi

; 149  : }

  0001e	c3		 ret	 0
?OnClear@CGraphicSubImage@@MAEXXZ ENDP			; CGraphicSubImage::OnClear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp
;	COMDAT ?OnLoad@CGraphicSubImage@@MAE_NHPBX@Z
_TEXT	SEGMENT
_textFileLoader$ = -508					; size = 16
$T2 = -492						; size = 8
__Result$1$ = -488					; size = 4
_this$GSCopy$1$ = -484					; size = 4
_c_rstVersion$1$ = -480					; size = 4
_i$1$ = -480						; size = 4
__Result$1$ = -476					; size = 4
__Result$1$ = -476					; size = 4
_stTokenVector$ = -472					; size = 12
$T3 = -460						; size = 4
_nPos$1$ = -460						; size = 4
_c_rstTitle$1$ = -460					; size = 4
tv4900 = -460						; size = 4
$T4 = -456						; size = 4
$T5 = -456						; size = 4
__Result$1$ = -456					; size = 4
$T6 = -452						; size = 4
__Result$1$ = -452					; size = 4
__Myhead$1$ = -452					; size = 4
__Result$1$ = -452					; size = 4
_stTokenMap$ = -448					; size = 8
$T7 = -440						; size = 24
$T8 = -416						; size = 24
$T9 = -392						; size = 24
$T10 = -368						; size = 24
$T11 = -344						; size = 24
$T12 = -320						; size = 24
$T13 = -296						; size = 24
__Loc$14 = -284						; size = 12
_szFileName$ = -272					; size = 256
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_iSize$ = 8						; size = 4
_c_pvBuf$ = 12						; size = 4
?OnLoad@CGraphicSubImage@@MAE_NHPBX@Z PROC		; CGraphicSubImage::OnLoad, COMDAT
; _this$ = ecx

; 68   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?OnLoad@CGraphicSubImage@@MAE_NHPBX@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec f0 01 00
	00		 sub	 esp, 496		; 000001f0H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	50		 push	 eax
  00024	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00027	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002d	89 8d 1c fe ff
	ff		 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
  00033	8b 75 0c	 mov	 esi, DWORD PTR _c_pvBuf$[ebp]

; 69   : 	if (!c_pvBuf)

  00036	85 f6		 test	 esi, esi
  00038	0f 84 da 04 00
	00		 je	 $LN512@OnLoad
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 390  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  0003e	c7 85 28 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _stTokenVector$[ebp], 0
  00048	c7 85 2c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _stTokenVector$[ebp+4], 0
  00052	c7 85 30 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _stTokenVector$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  0005c	6a 40		 push	 64			; 00000040H
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp

; 74   : 	CTokenVector stTokenVector;

  0005e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 437  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  00065	c7 85 40 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _stTokenMap$[ebp], 0
  0006f	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _stTokenMap$[ebp+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  00079	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0007e	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 347  :         _Construct_in_place(_Pnode->_Left, _Pnode);

  00081	89 00		 mov	 DWORD PTR [eax], eax

; 348  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

  00083	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 349  :         _Construct_in_place(_Pnode->_Right, _Pnode);

  00086	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 350  :         _Pnode->_Color = _Black;

  00089	66 c7 40 0c 01
	01		 mov	 WORD PTR [eax+12], 257	; 00000101H

; 1941 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

  0008f	89 85 40 fe ff
	ff		 mov	 DWORD PTR _stTokenMap$[ebp], eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp

; 77   : 	CMemoryTextFileLoader textFileLoader;

  00095	8d 8d 04 fe ff
	ff		 lea	 ecx, DWORD PTR _textFileLoader$[ebp]
  0009b	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0009f	e8 00 00 00 00	 call	 ??0CMemoryTextFileLoader@@QAE@XZ ; CMemoryTextFileLoader::CMemoryTextFileLoader

; 78   : 
; 79   : 	textFileLoader.Bind(iSize, c_pvBuf);

  000a4	56		 push	 esi
  000a5	ff 75 08	 push	 DWORD PTR _iSize$[ebp]
  000a8	8d 8d 04 fe ff
	ff		 lea	 ecx, DWORD PTR _textFileLoader$[ebp]
  000ae	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  000b2	e8 00 00 00 00	 call	 ?Bind@CMemoryTextFileLoader@@QAEXHPBX@Z ; CMemoryTextFileLoader::Bind

; 81   : 	for (DWORD i = 0; i < textFileLoader.GetLineCount(); ++i)

  000b7	33 f6		 xor	 esi, esi
  000b9	8d 8d 04 fe ff
	ff		 lea	 ecx, DWORD PTR _textFileLoader$[ebp]
  000bf	89 b5 20 fe ff
	ff		 mov	 DWORD PTR _i$1$[ebp], esi
  000c5	e8 00 00 00 00	 call	 ?GetLineCount@CMemoryTextFileLoader@@QAEKXZ ; CMemoryTextFileLoader::GetLineCount
  000ca	85 c0		 test	 eax, eax
  000cc	0f 84 c8 02 00
	00		 je	 $LN1100@OnLoad
$LL4@OnLoad:

; 82   : 	{
; 83   : 		if (!textFileLoader.SplitLine(i, &stTokenVector))

  000d2	68 00 00 00 00	 push	 OFFSET ??_C@_02OJDBNLEE@?5?7@
  000d7	8d 85 28 fe ff
	ff		 lea	 eax, DWORD PTR _stTokenVector$[ebp]
  000dd	50		 push	 eax
  000de	56		 push	 esi
  000df	8d 8d 04 fe ff
	ff		 lea	 ecx, DWORD PTR _textFileLoader$[ebp]
  000e5	e8 00 00 00 00	 call	 ?SplitLine@CMemoryTextFileLoader@@QAE_NKPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@PBD@Z ; CMemoryTextFileLoader::SplitLine
  000ea	84 c0		 test	 al, al
  000ec	0f 84 89 02 00
	00		 je	 $LN2@OnLoad
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  000f2	8b 8d 2c fe ff
	ff		 mov	 ecx, DWORD PTR _stTokenVector$[ebp+4]
  000f8	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  000fd	8b b5 28 fe ff
	ff		 mov	 esi, DWORD PTR _stTokenVector$[ebp]
  00103	2b ce		 sub	 ecx, esi
  00105	f7 e9		 imul	 ecx
  00107	c1 fa 02	 sar	 edx, 2
  0010a	8b c2		 mov	 eax, edx
  0010c	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0010f	03 c2		 add	 eax, edx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp

; 88   : 		if (stTokenVector.size() != 2)

  00111	83 f8 02	 cmp	 eax, 2
  00114	0f 85 18 03 00
	00		 jne	 $LN1066@OnLoad

; 91   : 		}
; 92   : 
; 93   : 		stl_lowers(stTokenVector[0]);

  0011a	56		 push	 esi
  0011b	e8 00 00 00 00	 call	 ?stl_lowers@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; stl_lowers
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1952 :         return _My_data._Myfirst[_Pos];

  00120	8b 85 28 fe ff
	ff		 mov	 eax, DWORD PTR _stTokenVector$[ebp]
  00126	83 c0 18	 add	 eax, 24			; 00000018H
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp

; 94   : 		stl_lowers(stTokenVector[1]);

  00129	50		 push	 eax
  0012a	e8 00 00 00 00	 call	 ?stl_lowers@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; stl_lowers
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1952 :         return _My_data._Myfirst[_Pos];

  0012f	8b b5 28 fe ff
	ff		 mov	 esi, DWORD PTR _stTokenVector$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map

; 196  :         const auto _Loc = _Mybase::_Find_lower_bound(_Keyval);

  00135	8d 8d 40 fe ff
	ff		 lea	 ecx, DWORD PTR _stTokenMap$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp

; 94   : 		stl_lowers(stTokenVector[1]);

  0013b	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1952 :         return _My_data._Myfirst[_Pos];

  0013e	8d 46 18	 lea	 eax, DWORD PTR [esi+24]
  00141	89 85 24 fe ff
	ff		 mov	 DWORD PTR __Result$1$[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map

; 196  :         const auto _Loc = _Mybase::_Find_lower_bound(_Keyval);

  00147	8d 85 e4 fe ff
	ff		 lea	 eax, DWORD PTR __Loc$14[ebp]
  0014d	56		 push	 esi
  0014e	50		 push	 eax
  0014f	e8 00 00 00 00	 call	 ??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Find_lower_bound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00154	8b bd ec fe ff
	ff		 mov	 edi, DWORD PTR __Loc$14[ebp+8]
  0015a	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0015e	75 15		 jne	 SHORT $LN698@OnLoad
  00160	8d 47 10	 lea	 eax, DWORD PTR [edi+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef

; 143  :         return _Left < _Right;

  00163	50		 push	 eax
  00164	56		 push	 esi
  00165	e8 00 00 00 00	 call	 ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
  0016a	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0016d	84 c0		 test	 al, al
  0016f	0f 84 b6 00 00
	00		 je	 $LN697@OnLoad
$LN698@OnLoad:

; 1629 :         if (max_size() == _Get_scary()->_Mysize) {

  00175	81 bd 44 fe ff
	ff ff ff ff 03	 cmp	 DWORD PTR _stTokenMap$[ebp+4], 67108863 ; 03ffffffH
  0017f	0f 84 45 0b 00
	00		 je	 $LN1067@OnLoad
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map

; 204  :         const auto _Inserted = _Tree_temp_node<_Alnode>(_Mybase::_Getal(), _Scary->_Myhead, piecewise_construct,

  00185	8b 85 40 fe ff
	ff		 mov	 eax, DWORD PTR _stTokenMap$[ebp]
  0018b	89 85 3c fe ff
	ff		 mov	 DWORD PTR __Myhead$1$[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1005 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  00191	8d 85 40 fe ff
	ff		 lea	 eax, DWORD PTR _stTokenMap$[ebp]
  00197	89 85 14 fe ff
	ff		 mov	 DWORD PTR $T2[ebp], eax

; 77   :         return ::operator new(_Bytes);

  0019d	6a 40		 push	 64			; 00000040H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 785  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  0019f	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1012 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  001a3	c7 85 18 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp+4], 0

; 77   :         return ::operator new(_Bytes);

  001ad	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  001b2	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  001b5	89 85 38 fe ff
	ff		 mov	 DWORD PTR $T5[ebp], eax

; 1013 :         _Ptr = _Al.allocate(1);

  001bb	89 85 18 fe ff
	ff		 mov	 DWORD PTR $T2[ebp+4], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 807  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  001c1	8d 78 10	 lea	 edi, DWORD PTR [eax+16]
  001c4	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 214  :         : first(_Tuple_get<_Indexes1>(_STD move(_Val1))...), second(_Tuple_get<_Indexes2>(_STD move(_Val2))...) {}

  001c8	56		 push	 esi
  001c9	8b cf		 mov	 ecx, edi
  001cb	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 808  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  001d0	8b 85 38 fe ff
	ff		 mov	 eax, DWORD PTR $T5[ebp]
  001d6	0f 57 c0	 xorps	 xmm0, xmm0
  001d9	8b 8d 3c fe ff
	ff		 mov	 ecx, DWORD PTR __Myhead$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  001df	0f 11 47 18	 movups	 XMMWORD PTR [edi+24], xmm0

; 4998 :         _My_data._Mysize = 0;

  001e3	c7 47 28 00 00
	00 00		 mov	 DWORD PTR [edi+40], 0

; 4999 :         _My_data._Myres  = _BUF_SIZE - 1;

  001ea	c7 47 2c 0f 00
	00 00		 mov	 DWORD PTR [edi+44], 15	; 0000000fH

; 5000 :         _My_data._Activate_SSO_buffer();
; 5001 : 
; 5002 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5003 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  001f1	c6 47 18 00	 mov	 BYTE PTR [edi+24], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map

; 210  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  001f5	50		 push	 eax
  001f6	ff b5 e8 fe ff
	ff		 push	 DWORD PTR __Loc$14[ebp+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 808  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  001fc	89 08		 mov	 DWORD PTR [eax], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map

; 210  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  001fe	ff b5 e4 fe ff
	ff		 push	 DWORD PTR __Loc$14[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 809  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  00204	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 810  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  00207	89 48 08	 mov	 DWORD PTR [eax+8], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map

; 210  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  0020a	8d 8d 40 fe ff
	ff		 lea	 ecx, DWORD PTR _stTokenMap$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 811  :         this->_Ptr->_Color = _Red;

  00210	66 c7 40 0c 00
	00		 mov	 WORD PTR [eax+12], 0

; 812  :         this->_Ptr->_Isnil = false;
; 813  :     }

  00216	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 654  :     _Val         = static_cast<_Other&&>(_New_val);

  0021a	c7 85 18 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map

; 210  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00224	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Insert_node
  00229	8b f8		 mov	 edi, eax
$LN697@OnLoad:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3306 :         if (this == _STD addressof(_Right)) {

  0022b	8b 85 24 fe ff
	ff		 mov	 eax, DWORD PTR __Result$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map

; 345  :         return _Try_emplace(_Keyval).first->_Myval.second;

  00231	83 c7 28	 add	 edi, 40			; 00000028H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3306 :         if (this == _STD addressof(_Right)) {

  00234	3b f8		 cmp	 edi, eax
  00236	0f 84 3f 01 00
	00		 je	 $LN2@OnLoad

; 2293 :         if (_Large_string_engaged()) {

  0023c	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 3346 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00240	8b 70 10	 mov	 esi, DWORD PTR [eax+16]
  00243	89 b5 38 fe ff
	ff		 mov	 DWORD PTR $T4[ebp], esi

; 2293 :         if (_Large_string_engaged()) {

  00249	72 08		 jb	 SHORT $LN816@OnLoad

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  0024b	8b 00		 mov	 eax, DWORD PTR [eax]
  0024d	89 85 24 fe ff
	ff		 mov	 DWORD PTR __Result$1$[ebp], eax
$LN816@OnLoad:

; 3530 :         if (_Count <= _Mypair._Myval2._Myres) {

  00253	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  00256	89 8d 34 fe ff
	ff		 mov	 DWORD PTR $T3[ebp], ecx
  0025c	3b f1		 cmp	 esi, ecx
  0025e	77 32		 ja	 SHORT $LN821@OnLoad

; 2283 :         value_type* _Result = _Bx._Buf;

  00260	89 bd 3c fe ff
	ff		 mov	 DWORD PTR __Result$1$[ebp], edi
  00266	8b d7		 mov	 edx, edi

; 2284 :         if (_Large_string_engaged()) {

  00268	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0026b	72 08		 jb	 SHORT $LN824@OnLoad

; 2285 :             _Result = _Unfancy(_Bx._Ptr);

  0026d	8b 17		 mov	 edx, DWORD PTR [edi]
  0026f	89 95 3c fe ff
	ff		 mov	 DWORD PTR __Result$1$[ebp], edx
$LN824@OnLoad:

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00275	56		 push	 esi
  00276	50		 push	 eax
  00277	52		 push	 edx

; 3533 :             _Mypair._Myval2._Mysize = _Count;

  00278	89 77 10	 mov	 DWORD PTR [edi+16], esi

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  0027b	e8 00 00 00 00	 call	 _memmove

; 3535 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  00280	8b 85 3c fe ff
	ff		 mov	 eax, DWORD PTR __Result$1$[ebp]

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00286	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3535 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  00289	c6 04 06 00	 mov	 BYTE PTR [esi+eax], 0

; 3536 :             return *this;

  0028d	e9 e9 00 00 00	 jmp	 $LN2@OnLoad
$LN821@OnLoad:

; 4903 :         if (_New_size > max_size()) {

  00292	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH
  00298	0f 87 27 0a 00
	00		 ja	 $LN1068@OnLoad

; 4883 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  0029e	83 ce 0f	 or	 esi, 15			; 0000000fH
  002a1	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 4884 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  002a7	76 15		 jbe	 SHORT $LN838@OnLoad

; 4885 :             return _Max;

  002a9	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  002ae	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  002b3	50		 push	 eax
  002b4	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  002b9	83 c4 04	 add	 esp, 4
  002bc	eb 52		 jmp	 SHORT $LN1103@OnLoad
$LN838@OnLoad:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4888 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  002be	8b d1		 mov	 edx, ecx
  002c0	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  002c5	d1 ea		 shr	 edx, 1
  002c7	2b c2		 sub	 eax, edx
  002c9	3b c8		 cmp	 ecx, eax
  002cb	76 15		 jbe	 SHORT $LN839@OnLoad

; 4889 :             return _Max;

  002cd	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  002d2	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  002d7	50		 push	 eax
  002d8	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  002dd	83 c4 04	 add	 esp, 4
  002e0	eb 2e		 jmp	 SHORT $LN1103@OnLoad
$LN839@OnLoad:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4892 :         return (_STD max)(_Masked, _Old + _Old / 2);

  002e2	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
  002e5	3b f0		 cmp	 esi, eax
  002e7	0f 42 f0	 cmovb	 esi, eax

; 4910 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  002ea	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  002ed	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  002f2	72 0b		 jb	 SHORT $LN846@OnLoad

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  002f4	50		 push	 eax
  002f5	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  002fa	83 c4 04	 add	 esp, 4
  002fd	eb 11		 jmp	 SHORT $LN1103@OnLoad
$LN846@OnLoad:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  002ff	85 c0		 test	 eax, eax
  00301	74 0b		 je	 SHORT $LN847@OnLoad

; 77   :         return ::operator new(_Bytes);

  00303	50		 push	 eax
  00304	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00309	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  0030c	eb 02		 jmp	 SHORT $LN1103@OnLoad
$LN847@OnLoad:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  0030e	33 c0		 xor	 eax, eax
$LN1103@OnLoad:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4919 :         _Mypair._Myval2._Mysize = _New_size;

  00310	89 85 3c fe ff
	ff		 mov	 DWORD PTR $T6[ebp], eax
  00316	8b 85 38 fe ff
	ff		 mov	 eax, DWORD PTR $T4[ebp]

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0031c	50		 push	 eax

; 4919 :         _Mypair._Myval2._Mysize = _New_size;

  0031d	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00320	8b 85 24 fe ff
	ff		 mov	 eax, DWORD PTR __Result$1$[ebp]

; 4920 :         _Mypair._Myval2._Myres  = _New_capacity;

  00326	89 77 14	 mov	 DWORD PTR [edi+20], esi

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00329	8b b5 3c fe ff
	ff		 mov	 esi, DWORD PTR $T6[ebp]
  0032f	50		 push	 eax
  00330	56		 push	 esi
  00331	e8 00 00 00 00	 call	 _memcpy

; 3543 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  00336	8b 85 38 fe ff
	ff		 mov	 eax, DWORD PTR $T4[ebp]

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0033c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4922 :         if (_BUF_SIZE <= _Old_capacity) {

  0033f	8b 8d 34 fe ff
	ff		 mov	 ecx, DWORD PTR $T3[ebp]

; 3543 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  00345	c6 04 30 00	 mov	 BYTE PTR [eax+esi], 0

; 4922 :         if (_BUF_SIZE <= _Old_capacity) {

  00349	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0034c	72 2b		 jb	 SHORT $LN832@OnLoad

; 4923 :             _Al.deallocate(_Mypair._Myval2._Bx._Ptr, _Old_capacity + 1);

  0034e	8b 07		 mov	 eax, DWORD PTR [edi]
  00350	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00351	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00357	72 16		 jb	 SHORT $LN869@OnLoad

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00359	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0035c	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0035f	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00361	83 c0 fc	 add	 eax, -4			; fffffffcH
  00364	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00367	0f 87 85 09 00
	00		 ja	 $LN630@OnLoad

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0036d	8b c2		 mov	 eax, edx
$LN869@OnLoad:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0036f	51		 push	 ecx
  00370	50		 push	 eax
  00371	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00376	83 c4 08	 add	 esp, 8
$LN832@OnLoad:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp

; 81   : 	for (DWORD i = 0; i < textFileLoader.GetLineCount(); ++i)

  00379	89 37		 mov	 DWORD PTR [edi], esi
$LN2@OnLoad:
  0037b	ff 85 20 fe ff
	ff		 inc	 DWORD PTR _i$1$[ebp]
  00381	8d 8d 04 fe ff
	ff		 lea	 ecx, DWORD PTR _textFileLoader$[ebp]
  00387	e8 00 00 00 00	 call	 ?GetLineCount@CMemoryTextFileLoader@@QAEKXZ ; CMemoryTextFileLoader::GetLineCount
  0038c	8b b5 20 fe ff
	ff		 mov	 esi, DWORD PTR _i$1$[ebp]
  00392	3b f0		 cmp	 esi, eax
  00394	0f 82 38 fd ff
	ff		 jb	 $LL4@OnLoad
$LN1100@OnLoad:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  0039a	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_05PHLGJONK@title@
  0039f	0f 57 c0	 xorps	 xmm0, xmm0

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  003a2	0f 11 85 c0 fe
	ff ff		 movups	 XMMWORD PTR $T12[ebp], xmm0

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  003a9	89 85 c0 fe ff
	ff		 mov	 DWORD PTR $T12[ebp], eax
  003af	a0 04 00 00 00	 mov	 al, BYTE PTR ??_C@_05PHLGJONK@title@+4

; 2749 :             _My_data._Mysize = _Count;

  003b4	c7 85 d0 fe ff
	ff 05 00 00 00	 mov	 DWORD PTR $T12[ebp+16], 5

; 2750 :             _My_data._Myres  = _BUF_SIZE - 1;

  003be	c7 85 d4 fe ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T12[ebp+20], 15 ; 0000000fH

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  003c8	88 85 c4 fe ff
	ff		 mov	 BYTE PTR $T12[ebp+4], al

; 2756 :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  003ce	c6 85 c5 fe ff
	ff 00		 mov	 BYTE PTR $T12[ebp+5], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp

; 99   : 	const std::string& c_rstTitle = stTokenMap["title"];

  003d5	8d 85 c0 fe ff
	ff		 lea	 eax, DWORD PTR $T12[ebp]
  003db	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  003df	50		 push	 eax
  003e0	8d 8d 40 fe ff
	ff		 lea	 ecx, DWORD PTR _stTokenMap$[ebp]
  003e6	e8 00 00 00 00	 call	 ??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@$$QAV21@@Z ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::operator[]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5011 :         if (_My_data._Large_string_engaged()) {

  003eb	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR $T12[ebp+20]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp

; 99   : 	const std::string& c_rstTitle = stTokenMap["title"];

  003f1	89 85 34 fe ff
	ff		 mov	 DWORD PTR _c_rstTitle$1$[ebp], eax
  003f7	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5011 :         if (_My_data._Large_string_engaged()) {

  003fb	83 f9 10	 cmp	 ecx, 16			; 00000010H
  003fe	0f 82 3d 01 00
	00		 jb	 $LN307@OnLoad
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00404	8b 95 c0 fe ff
	ff		 mov	 edx, DWORD PTR $T12[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0040a	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0040b	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0040d	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00413	0f 82 1e 01 00
	00		 jb	 $LN317@OnLoad

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00419	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0041c	83 c1 23	 add	 ecx, 35			; 00000023H
  0041f	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00421	83 c0 fc	 add	 eax, -4			; fffffffcH
  00424	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00427	0f 87 93 08 00
	00		 ja	 $LN1107@OnLoad
  0042d	e9 05 01 00 00	 jmp	 $LN317@OnLoad
$LN1066@OnLoad:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp

; 90   : 			return false;

  00432	8d 8d 04 fe ff
	ff		 lea	 ecx, DWORD PTR _textFileLoader$[ebp]
  00438	e8 00 00 00 00	 call	 ??1CMemoryTextFileLoader@@UAE@XZ ; CMemoryTextFileLoader::~CMemoryTextFileLoader
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 754  :         _Erase_tree(_Al, _Myhead->_Parent);

  0043d	8b 85 40 fe ff
	ff		 mov	 eax, DWORD PTR _stTokenMap$[ebp]
  00443	ff 70 04	 push	 DWORD PTR [eax+4]
  00446	8d 85 40 fe ff
	ff		 lea	 eax, DWORD PTR _stTokenMap$[ebp]
  0044c	50		 push	 eax
  0044d	8b c8		 mov	 ecx, eax
  0044f	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00454	6a 40		 push	 64			; 00000040H
  00456	ff b5 40 fe ff
	ff		 push	 DWORD PTR _stTokenMap$[ebp]
  0045c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  00461	8b b5 28 fe ff
	ff		 mov	 esi, DWORD PTR _stTokenVector$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00467	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  0046a	85 f6		 test	 esi, esi
  0046c	0f 84 a6 00 00
	00		 je	 $LN512@OnLoad

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);

  00472	8b bd 2c fe ff
	ff		 mov	 edi, DWORD PTR _stTokenVector$[ebp+4]
  00478	3b f7		 cmp	 esi, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 947  :         for (; _First != _Last; ++_First) {

  0047a	74 55		 je	 SHORT $LN516@OnLoad
  0047c	0f 1f 40 00	 npad	 4
$LL941@OnLoad:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  00480	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00483	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  00486	72 2b		 jb	 SHORT $LN960@OnLoad
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00488	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0048a	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0048b	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00491	72 16		 jb	 SHORT $LN970@OnLoad

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00493	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00496	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00499	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0049b	83 c0 fc	 add	 eax, -4			; fffffffcH
  0049e	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  004a1	0f 87 4b 08 00
	00		 ja	 $LN630@OnLoad

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  004a7	8b c2		 mov	 eax, edx
$LN970@OnLoad:

; 255  :         ::operator delete(_Ptr, _Bytes);

  004a9	51		 push	 ecx
  004aa	50		 push	 eax
  004ab	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  004b0	83 c4 08	 add	 esp, 8
$LN960@OnLoad:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5019 :         _My_data._Mysize = 0;

  004b3	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 5020 :         _My_data._Myres  = _BUF_SIZE - 1;

  004ba	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 5021 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5022 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  004c1	c6 06 00	 mov	 BYTE PTR [esi], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 947  :         for (; _First != _Last; ++_First) {

  004c4	83 c6 18	 add	 esi, 24			; 00000018H
  004c7	3b f7		 cmp	 esi, edi
  004c9	75 b5		 jne	 SHORT $LL941@OnLoad
$LN1105@OnLoad:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp

; 109  : 		return false;

  004cb	8b b5 28 fe ff
	ff		 mov	 esi, DWORD PTR _stTokenVector$[ebp]
$LN516@OnLoad:
  004d1	8b 8d 30 fe ff
	ff		 mov	 ecx, DWORD PTR _stTokenVector$[ebp+8]
  004d7	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  004dc	2b ce		 sub	 ecx, esi
  004de	f7 e9		 imul	 ecx
  004e0	c1 fa 02	 sar	 edx, 2
  004e3	8b c2		 mov	 eax, edx
  004e5	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  004e8	03 c2		 add	 eax, edx
  004ea	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  004ed	8b c6		 mov	 eax, esi
  004ef	c1 e1 03	 shl	 ecx, 3
  004f2	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  004f8	72 14		 jb	 SHORT $LN569@OnLoad
  004fa	8b 70 fc	 mov	 esi, DWORD PTR [eax-4]
  004fd	83 c1 23	 add	 ecx, 35			; 00000023H
  00500	2b c6		 sub	 eax, esi
  00502	83 c0 fc	 add	 eax, -4			; fffffffcH
  00505	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00508	0f 87 e4 07 00
	00		 ja	 $LN630@OnLoad
$LN569@OnLoad:
  0050e	51		 push	 ecx
  0050f	56		 push	 esi
  00510	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00515	83 c4 08	 add	 esp, 8
$LN512@OnLoad:
  00518	32 c0		 xor	 al, al
$LN1@OnLoad:

; 143  : }

  0051a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0051d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00524	59		 pop	 ecx
  00525	5f		 pop	 edi
  00526	5e		 pop	 esi
  00527	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0052a	33 cd		 xor	 ecx, ebp
  0052c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00531	8b e5		 mov	 esp, ebp
  00533	5d		 pop	 ebp
  00534	c2 08 00	 ret	 8
$LN317@OnLoad:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00537	51		 push	 ecx
  00538	52		 push	 edx
  00539	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0053e	83 c4 08	 add	 esp, 8
$LN307@OnLoad:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00541	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_07CPCPJPKL@version@
  00546	0f 57 c0	 xorps	 xmm0, xmm0

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00549	0f 11 85 d8 fe
	ff ff		 movups	 XMMWORD PTR $T13[ebp], xmm0

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00550	89 85 d8 fe ff
	ff		 mov	 DWORD PTR $T13[ebp], eax
  00556	66 a1 04 00 00
	00		 mov	 ax, WORD PTR ??_C@_07CPCPJPKL@version@+4
  0055c	66 89 85 dc fe
	ff ff		 mov	 WORD PTR $T13[ebp+4], ax
  00563	a0 06 00 00 00	 mov	 al, BYTE PTR ??_C@_07CPCPJPKL@version@+6

; 5019 :         _My_data._Mysize = 0;

  00568	c7 85 d0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T12[ebp+16], 0

; 5020 :         _My_data._Myres  = _BUF_SIZE - 1;

  00572	c7 85 d4 fe ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T12[ebp+20], 15 ; 0000000fH

; 5021 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5022 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0057c	c6 85 c0 fe ff
	ff 00		 mov	 BYTE PTR $T12[ebp], 0

; 2749 :             _My_data._Mysize = _Count;

  00583	c7 85 e8 fe ff
	ff 07 00 00 00	 mov	 DWORD PTR $T13[ebp+16], 7

; 2750 :             _My_data._Myres  = _BUF_SIZE - 1;

  0058d	c7 85 ec fe ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T13[ebp+20], 15 ; 0000000fH

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00597	88 85 de fe ff
	ff		 mov	 BYTE PTR $T13[ebp+6], al

; 2756 :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  0059d	c6 85 df fe ff
	ff 00		 mov	 BYTE PTR $T13[ebp+7], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp

; 100  : 	const std::string& c_rstVersion = stTokenMap["version"];

  005a4	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR $T13[ebp]
  005aa	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  005ae	50		 push	 eax
  005af	8d 8d 40 fe ff
	ff		 lea	 ecx, DWORD PTR _stTokenMap$[ebp]
  005b5	e8 00 00 00 00	 call	 ??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@$$QAV21@@Z ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::operator[]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5011 :         if (_My_data._Large_string_engaged()) {

  005ba	8b 8d ec fe ff
	ff		 mov	 ecx, DWORD PTR $T13[ebp+20]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp

; 100  : 	const std::string& c_rstVersion = stTokenMap["version"];

  005c0	89 85 20 fe ff
	ff		 mov	 DWORD PTR _c_rstVersion$1$[ebp], eax
  005c6	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5011 :         if (_My_data._Large_string_engaged()) {

  005ca	83 f9 10	 cmp	 ecx, 16			; 00000010H
  005cd	72 2f		 jb	 SHORT $LN371@OnLoad
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  005cf	8b 95 d8 fe ff
	ff		 mov	 edx, DWORD PTR $T13[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  005d5	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  005d6	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  005d8	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  005de	72 14		 jb	 SHORT $LN381@OnLoad

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  005e0	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  005e3	83 c1 23	 add	 ecx, 35			; 00000023H
  005e6	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  005e8	83 c0 fc	 add	 eax, -4			; fffffffcH
  005eb	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  005ee	0f 87 db 06 00
	00		 ja	 $LN1108@OnLoad
$LN381@OnLoad:

; 255  :         ::operator delete(_Ptr, _Bytes);

  005f4	51		 push	 ecx
  005f5	52		 push	 edx
  005f6	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  005fb	83 c4 08	 add	 esp, 8
$LN371@OnLoad:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  005fe	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_05NGOMGBBD@image@
  00603	0f 57 c0	 xorps	 xmm0, xmm0

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00606	0f 11 85 a8 fe
	ff ff		 movups	 XMMWORD PTR $T11[ebp], xmm0

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  0060d	89 85 a8 fe ff
	ff		 mov	 DWORD PTR $T11[ebp], eax
  00613	a0 04 00 00 00	 mov	 al, BYTE PTR ??_C@_05NGOMGBBD@image@+4

; 5019 :         _My_data._Mysize = 0;

  00618	c7 85 e8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T13[ebp+16], 0

; 5020 :         _My_data._Myres  = _BUF_SIZE - 1;

  00622	c7 85 ec fe ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T13[ebp+20], 15 ; 0000000fH

; 5021 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5022 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0062c	c6 85 d8 fe ff
	ff 00		 mov	 BYTE PTR $T13[ebp], 0

; 2749 :             _My_data._Mysize = _Count;

  00633	c7 85 b8 fe ff
	ff 05 00 00 00	 mov	 DWORD PTR $T11[ebp+16], 5

; 2750 :             _My_data._Myres  = _BUF_SIZE - 1;

  0063d	c7 85 bc fe ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T11[ebp+20], 15 ; 0000000fH

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00647	88 85 ac fe ff
	ff		 mov	 BYTE PTR $T11[ebp+4], al

; 2756 :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  0064d	c6 85 ad fe ff
	ff 00		 mov	 BYTE PTR $T11[ebp+5], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp

; 101  : 	const std::string& c_rstImage = stTokenMap["image"];

  00654	8d 85 a8 fe ff
	ff		 lea	 eax, DWORD PTR $T11[ebp]
  0065a	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  0065e	50		 push	 eax
  0065f	8d 8d 40 fe ff
	ff		 lea	 ecx, DWORD PTR _stTokenMap$[ebp]
  00665	e8 00 00 00 00	 call	 ??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@$$QAV21@@Z ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::operator[]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5011 :         if (_My_data._Large_string_engaged()) {

  0066a	8b 8d bc fe ff
	ff		 mov	 ecx, DWORD PTR $T11[ebp+20]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp

; 101  : 	const std::string& c_rstImage = stTokenMap["image"];

  00670	8b f0		 mov	 esi, eax
  00672	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5011 :         if (_My_data._Large_string_engaged()) {

  00676	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00679	72 2f		 jb	 SHORT $LN115@OnLoad
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0067b	8b 95 a8 fe ff
	ff		 mov	 edx, DWORD PTR $T11[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00681	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00682	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00684	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0068a	72 14		 jb	 SHORT $LN125@OnLoad

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0068c	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0068f	83 c1 23	 add	 ecx, 35			; 00000023H
  00692	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00694	83 c0 fc	 add	 eax, -4			; fffffffcH
  00697	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0069a	0f 87 34 06 00
	00		 ja	 $LN1109@OnLoad
$LN125@OnLoad:

; 255  :         ::operator delete(_Ptr, _Bytes);

  006a0	51		 push	 ecx
  006a1	52		 push	 edx
  006a2	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  006a7	83 c4 08	 add	 esp, 8
$LN115@OnLoad:
  006aa	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5019 :         _My_data._Mysize = 0;

  006ad	c7 85 b8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T11[ebp+16], 0

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  006b7	0f 11 85 48 fe
	ff ff		 movups	 XMMWORD PTR $T7[ebp], xmm0

; 5020 :         _My_data._Myres  = _BUF_SIZE - 1;

  006be	c7 85 bc fe ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T11[ebp+20], 15 ; 0000000fH

; 5021 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5022 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  006c8	c6 85 a8 fe ff
	ff 00		 mov	 BYTE PTR $T11[ebp], 0

; 2749 :             _My_data._Mysize = _Count;

  006cf	c7 85 58 fe ff
	ff 04 00 00 00	 mov	 DWORD PTR $T7[ebp+16], 4

; 2750 :             _My_data._Myres  = _BUF_SIZE - 1;

  006d9	c7 85 5c fe ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T7[ebp+20], 15 ; 0000000fH

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  006e3	c7 85 48 fe ff
	ff 6c 65 66 74	 mov	 DWORD PTR $T7[ebp], 1952867692 ; 7466656cH

; 2756 :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  006ed	c6 85 4c fe ff
	ff 00		 mov	 BYTE PTR $T7[ebp+4], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp

; 102  : 	const std::string& c_rstLeft = stTokenMap["left"];

  006f4	8d 85 48 fe ff
	ff		 lea	 eax, DWORD PTR $T7[ebp]
  006fa	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  006fe	50		 push	 eax
  006ff	8d 8d 40 fe ff
	ff		 lea	 ecx, DWORD PTR _stTokenMap$[ebp]
  00705	e8 00 00 00 00	 call	 ??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@$$QAV21@@Z ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::operator[]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5011 :         if (_My_data._Large_string_engaged()) {

  0070a	8b 8d 5c fe ff
	ff		 mov	 ecx, DWORD PTR $T7[ebp+20]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp

; 102  : 	const std::string& c_rstLeft = stTokenMap["left"];

  00710	89 85 18 fe ff
	ff		 mov	 DWORD PTR __Result$1$[ebp], eax
  00716	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5011 :         if (_My_data._Large_string_engaged()) {

  0071a	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0071d	72 2f		 jb	 SHORT $LN179@OnLoad
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0071f	8b 95 48 fe ff
	ff		 mov	 edx, DWORD PTR $T7[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00725	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00726	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00728	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0072e	72 14		 jb	 SHORT $LN189@OnLoad

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00730	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00733	83 c1 23	 add	 ecx, 35			; 00000023H
  00736	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00738	83 c0 fc	 add	 eax, -4			; fffffffcH
  0073b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0073e	0f 87 95 05 00
	00		 ja	 $LN1110@OnLoad
$LN189@OnLoad:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00744	51		 push	 ecx
  00745	52		 push	 edx
  00746	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0074b	83 c4 08	 add	 esp, 8
$LN179@OnLoad:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  0074e	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_03FGFCOCMD@top@
  00754	0f 57 c0	 xorps	 xmm0, xmm0

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00757	0f 11 85 90 fe
	ff ff		 movups	 XMMWORD PTR $T10[ebp], xmm0

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  0075e	66 89 85 90 fe
	ff ff		 mov	 WORD PTR $T10[ebp], ax
  00765	a0 02 00 00 00	 mov	 al, BYTE PTR ??_C@_03FGFCOCMD@top@+2

; 5019 :         _My_data._Mysize = 0;

  0076a	c7 85 58 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T7[ebp+16], 0

; 5020 :         _My_data._Myres  = _BUF_SIZE - 1;

  00774	c7 85 5c fe ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T7[ebp+20], 15 ; 0000000fH

; 5021 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5022 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0077e	c6 85 48 fe ff
	ff 00		 mov	 BYTE PTR $T7[ebp], 0

; 2749 :             _My_data._Mysize = _Count;

  00785	c7 85 a0 fe ff
	ff 03 00 00 00	 mov	 DWORD PTR $T10[ebp+16], 3

; 2750 :             _My_data._Myres  = _BUF_SIZE - 1;

  0078f	c7 85 a4 fe ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T10[ebp+20], 15 ; 0000000fH

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00799	88 85 92 fe ff
	ff		 mov	 BYTE PTR $T10[ebp+2], al

; 2756 :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  0079f	c6 85 93 fe ff
	ff 00		 mov	 BYTE PTR $T10[ebp+3], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp

; 103  : 	const std::string& c_rstTop = stTokenMap["top"];

  007a6	8d 85 90 fe ff
	ff		 lea	 eax, DWORD PTR $T10[ebp]
  007ac	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+8], 9
  007b0	50		 push	 eax
  007b1	8d 8d 40 fe ff
	ff		 lea	 ecx, DWORD PTR _stTokenMap$[ebp]
  007b7	e8 00 00 00 00	 call	 ??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@$$QAV21@@Z ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::operator[]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5011 :         if (_My_data._Large_string_engaged()) {

  007bc	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR $T10[ebp+20]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp

; 103  : 	const std::string& c_rstTop = stTokenMap["top"];

  007c2	89 85 24 fe ff
	ff		 mov	 DWORD PTR __Result$1$[ebp], eax
  007c8	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5011 :         if (_My_data._Large_string_engaged()) {

  007cc	83 f9 10	 cmp	 ecx, 16			; 00000010H
  007cf	72 2f		 jb	 SHORT $LN280@OnLoad
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  007d1	8b 95 90 fe ff
	ff		 mov	 edx, DWORD PTR $T10[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  007d7	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  007d8	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  007da	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  007e0	72 14		 jb	 SHORT $LN290@OnLoad

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  007e2	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  007e5	83 c1 23	 add	 ecx, 35			; 00000023H
  007e8	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  007ea	83 c0 fc	 add	 eax, -4			; fffffffcH
  007ed	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  007f0	0f 87 e8 04 00
	00		 ja	 $LN1111@OnLoad
$LN290@OnLoad:

; 255  :         ::operator delete(_Ptr, _Bytes);

  007f6	51		 push	 ecx
  007f7	52		 push	 edx
  007f8	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  007fd	83 c4 08	 add	 esp, 8
$LN280@OnLoad:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00800	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_05DHJDAOHK@right@
  00805	0f 57 c0	 xorps	 xmm0, xmm0

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00808	0f 11 85 78 fe
	ff ff		 movups	 XMMWORD PTR $T9[ebp], xmm0

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  0080f	89 85 78 fe ff
	ff		 mov	 DWORD PTR $T9[ebp], eax
  00815	a0 04 00 00 00	 mov	 al, BYTE PTR ??_C@_05DHJDAOHK@right@+4

; 5019 :         _My_data._Mysize = 0;

  0081a	c7 85 a0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T10[ebp+16], 0

; 5020 :         _My_data._Myres  = _BUF_SIZE - 1;

  00824	c7 85 a4 fe ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T10[ebp+20], 15 ; 0000000fH

; 5021 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5022 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0082e	c6 85 90 fe ff
	ff 00		 mov	 BYTE PTR $T10[ebp], 0

; 2749 :             _My_data._Mysize = _Count;

  00835	c7 85 88 fe ff
	ff 05 00 00 00	 mov	 DWORD PTR $T9[ebp+16], 5

; 2750 :             _My_data._Myres  = _BUF_SIZE - 1;

  0083f	c7 85 8c fe ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T9[ebp+20], 15 ; 0000000fH

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00849	88 85 7c fe ff
	ff		 mov	 BYTE PTR $T9[ebp+4], al

; 2756 :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  0084f	c6 85 7d fe ff
	ff 00		 mov	 BYTE PTR $T9[ebp+5], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp

; 104  : 	const std::string& c_rstRight = stTokenMap["right"];

  00856	8d 85 78 fe ff
	ff		 lea	 eax, DWORD PTR $T9[ebp]
  0085c	c6 45 fc 0a	 mov	 BYTE PTR __$EHRec$[ebp+8], 10 ; 0000000aH
  00860	50		 push	 eax
  00861	8d 8d 40 fe ff
	ff		 lea	 ecx, DWORD PTR _stTokenMap$[ebp]
  00867	e8 00 00 00 00	 call	 ??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@$$QAV21@@Z ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::operator[]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5011 :         if (_My_data._Large_string_engaged()) {

  0086c	8b 8d 8c fe ff
	ff		 mov	 ecx, DWORD PTR $T9[ebp+20]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp

; 104  : 	const std::string& c_rstRight = stTokenMap["right"];

  00872	8b f8		 mov	 edi, eax
  00874	89 bd 38 fe ff
	ff		 mov	 DWORD PTR __Result$1$[ebp], edi
  0087a	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5011 :         if (_My_data._Large_string_engaged()) {

  0087e	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00881	72 2f		 jb	 SHORT $LN398@OnLoad
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00883	8b 95 78 fe ff
	ff		 mov	 edx, DWORD PTR $T9[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00889	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0088a	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0088c	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00892	72 14		 jb	 SHORT $LN408@OnLoad

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00894	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00897	83 c1 23	 add	 ecx, 35			; 00000023H
  0089a	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0089c	83 c0 fc	 add	 eax, -4			; fffffffcH
  0089f	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  008a2	0f 87 3b 04 00
	00		 ja	 $LN1112@OnLoad
$LN408@OnLoad:

; 255  :         ::operator delete(_Ptr, _Bytes);

  008a8	51		 push	 ecx
  008a9	52		 push	 edx
  008aa	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  008af	83 c4 08	 add	 esp, 8
$LN398@OnLoad:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  008b2	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_06PMMPCIPB@bottom@
  008b7	0f 57 c0	 xorps	 xmm0, xmm0

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  008ba	0f 11 85 60 fe
	ff ff		 movups	 XMMWORD PTR $T8[ebp], xmm0

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  008c1	89 85 60 fe ff
	ff		 mov	 DWORD PTR $T8[ebp], eax
  008c7	66 a1 04 00 00
	00		 mov	 ax, WORD PTR ??_C@_06PMMPCIPB@bottom@+4

; 5019 :         _My_data._Mysize = 0;

  008cd	c7 85 88 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T9[ebp+16], 0

; 5020 :         _My_data._Myres  = _BUF_SIZE - 1;

  008d7	c7 85 8c fe ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T9[ebp+20], 15 ; 0000000fH

; 5021 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5022 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  008e1	c6 85 78 fe ff
	ff 00		 mov	 BYTE PTR $T9[ebp], 0

; 2749 :             _My_data._Mysize = _Count;

  008e8	c7 85 70 fe ff
	ff 06 00 00 00	 mov	 DWORD PTR $T8[ebp+16], 6

; 2750 :             _My_data._Myres  = _BUF_SIZE - 1;

  008f2	c7 85 74 fe ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T8[ebp+20], 15 ; 0000000fH

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  008fc	66 89 85 64 fe
	ff ff		 mov	 WORD PTR $T8[ebp+4], ax

; 2756 :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  00903	c6 85 66 fe ff
	ff 00		 mov	 BYTE PTR $T8[ebp+6], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp

; 105  : 	const std::string& c_rstBottom = stTokenMap["bottom"];

  0090a	8d 85 60 fe ff
	ff		 lea	 eax, DWORD PTR $T8[ebp]
  00910	c6 45 fc 0b	 mov	 BYTE PTR __$EHRec$[ebp+8], 11 ; 0000000bH
  00914	50		 push	 eax
  00915	8d 8d 40 fe ff
	ff		 lea	 ecx, DWORD PTR _stTokenMap$[ebp]
  0091b	e8 00 00 00 00	 call	 ??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@$$QAV21@@Z ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::operator[]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  00920	8b 8d 74 fe ff
	ff		 mov	 ecx, DWORD PTR $T8[ebp+20]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp

; 105  : 	const std::string& c_rstBottom = stTokenMap["bottom"];

  00926	89 85 3c fe ff
	ff		 mov	 DWORD PTR __Result$1$[ebp], eax
  0092c	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  00930	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  00933	72 2f		 jb	 SHORT $LN462@OnLoad
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00935	8b 95 60 fe ff
	ff		 mov	 edx, DWORD PTR $T8[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0093b	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0093c	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0093e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00944	72 14		 jb	 SHORT $LN472@OnLoad

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00946	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00949	83 c1 23	 add	 ecx, 35			; 00000023H
  0094c	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0094e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00951	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00954	0f 87 8e 03 00
	00		 ja	 $LN1113@OnLoad
$LN472@OnLoad:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0095a	51		 push	 ecx
  0095b	52		 push	 edx
  0095c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00961	83 c4 08	 add	 esp, 8
$LN462@OnLoad:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp

; 107  : 	if (c_rstTitle != "subimage")

  00964	68 00 00 00 00	 push	 OFFSET ??_C@_08LAJAOJDG@subimage@
  00969	ff b5 34 fe ff
	ff		 push	 DWORD PTR _c_rstTitle$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5019 :         _My_data._Mysize = 0;

  0096f	c7 85 70 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T8[ebp+16], 0

; 5020 :         _My_data._Myres  = _BUF_SIZE - 1;

  00979	c7 85 74 fe ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T8[ebp+20], 15 ; 0000000fH

; 5021 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5022 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00983	c6 85 60 fe ff
	ff 00		 mov	 BYTE PTR $T8[ebp], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp

; 107  : 	if (c_rstTitle != "subimage")

  0098a	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  0098f	83 c4 08	 add	 esp, 8
  00992	84 c0		 test	 al, al
  00994	0f 84 9e 00 00
	00		 je	 $LN8@OnLoad

; 109  : 		return false;

  0099a	8d 8d 04 fe ff
	ff		 lea	 ecx, DWORD PTR _textFileLoader$[ebp]
  009a0	e8 00 00 00 00	 call	 ??1CMemoryTextFileLoader@@UAE@XZ ; CMemoryTextFileLoader::~CMemoryTextFileLoader
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 754  :         _Erase_tree(_Al, _Myhead->_Parent);

  009a5	8b 85 40 fe ff
	ff		 mov	 eax, DWORD PTR _stTokenMap$[ebp]
  009ab	ff 70 04	 push	 DWORD PTR [eax+4]
  009ae	8d 85 40 fe ff
	ff		 lea	 eax, DWORD PTR _stTokenMap$[ebp]
  009b4	50		 push	 eax
  009b5	8b c8		 mov	 ecx, eax
  009b7	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  009bc	6a 40		 push	 64			; 00000040H
  009be	ff b5 40 fe ff
	ff		 push	 DWORD PTR _stTokenMap$[ebp]
  009c4	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  009c9	8b b5 28 fe ff
	ff		 mov	 esi, DWORD PTR _stTokenVector$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  009cf	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  009d2	85 f6		 test	 esi, esi
  009d4	0f 84 3e fb ff
	ff		 je	 $LN512@OnLoad

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);

  009da	8b bd 2c fe ff
	ff		 mov	 edi, DWORD PTR _stTokenVector$[ebp+4]
  009e0	3b f7		 cmp	 esi, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 947  :         for (; _First != _Last; ++_First) {

  009e2	0f 84 e9 fa ff
	ff		 je	 $LN516@OnLoad
$LL517@OnLoad:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  009e8	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  009eb	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  009ee	72 2b		 jb	 SHORT $LN536@OnLoad
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  009f0	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  009f2	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  009f3	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  009f9	72 16		 jb	 SHORT $LN546@OnLoad

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  009fb	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  009fe	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00a01	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00a03	83 c0 fc	 add	 eax, -4			; fffffffcH
  00a06	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00a09	0f 87 e3 02 00
	00		 ja	 $LN630@OnLoad

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00a0f	8b c2		 mov	 eax, edx
$LN546@OnLoad:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00a11	51		 push	 ecx
  00a12	50		 push	 eax
  00a13	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00a18	83 c4 08	 add	 esp, 8
$LN536@OnLoad:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5019 :         _My_data._Mysize = 0;

  00a1b	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 5020 :         _My_data._Myres  = _BUF_SIZE - 1;

  00a22	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 5021 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5022 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00a29	c6 06 00	 mov	 BYTE PTR [esi], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 947  :         for (; _First != _Last; ++_First) {

  00a2c	83 c6 18	 add	 esi, 24			; 00000018H
  00a2f	3b f7		 cmp	 esi, edi
  00a31	75 b5		 jne	 SHORT $LL517@OnLoad

; 255  :         ::operator delete(_Ptr, _Bytes);

  00a33	e9 93 fa ff ff	 jmp	 $LN1105@OnLoad
$LN8@OnLoad:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp

; 113  : 	if ("2.0" == c_rstVersion)

  00a38	ff b5 20 fe ff
	ff		 push	 DWORD PTR _c_rstVersion$1$[ebp]
  00a3e	68 00 00 00 00	 push	 OFFSET ??_C@_03GJAMENNA@2?40@
  00a43	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NQBDABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  00a48	83 c4 08	 add	 esp, 8
  00a4b	84 c0		 test	 al, al
  00a4d	0f 84 db 00 00
	00		 je	 $LN9@OnLoad

; 114  : 	{
; 115  : 		const std::string& c_rstSubFileName = GetFileNameString();

  00a53	8b bd 1c fe ff
	ff		 mov	 edi, DWORD PTR _this$GSCopy$1$[ebp]
  00a59	83 c7 0c	 add	 edi, 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2292 :         const value_type* _Result = _Bx._Buf;

  00a5c	8b d7		 mov	 edx, edi

; 2301 :         return _BUF_SIZE <= _Myres;

  00a5e	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H

; 4646 :         return static_cast<size_type>(

  00a62	8b 47 10	 mov	 eax, DWORD PTR [edi+16]

; 2293 :         if (_Large_string_engaged()) {

  00a65	72 02		 jb	 SHORT $LN1096@OnLoad

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  00a67	8b 17		 mov	 edx, DWORD PTR [edi]
$LN1096@OnLoad:

; 695  :     if (_Hay_size != 0) { // room for match, look for it

  00a69	85 c0		 test	 eax, eax
  00a6b	0f 84 98 00 00
	00		 je	 $LN11@OnLoad
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 66   :     return _Right < _Left ? _Right : _Left;

  00a71	83 c9 ff	 or	 ecx, -1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 696  :         for (auto _Match_try = _Haystack + (_STD min)(_Start_at, _Hay_size - 1);; --_Match_try) {

  00a74	48		 dec	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 66   :     return _Right < _Left ? _Right : _Left;

  00a75	3b c1		 cmp	 eax, ecx
  00a77	0f 42 c8	 cmovb	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 696  :         for (auto _Match_try = _Haystack + (_STD min)(_Start_at, _Hay_size - 1);; --_Match_try) {

  00a7a	03 ca		 add	 ecx, edx

; 465  :         return _Left == _Right;

  00a7c	80 39 5c	 cmp	 BYTE PTR [ecx], 92	; 0000005cH

; 697  :             if (_Traits::eq(*_Match_try, _Ch)) {

  00a7f	74 0e		 je	 SHORT $LN1069@OnLoad
$LL885@OnLoad:

; 699  :             }
; 700  : 
; 701  :             if (_Match_try == _Haystack) {

  00a81	3b ca		 cmp	 ecx, edx
  00a83	0f 84 80 00 00
	00		 je	 $LN11@OnLoad

; 696  :         for (auto _Match_try = _Haystack + (_STD min)(_Start_at, _Hay_size - 1);; --_Match_try) {

  00a89	49		 dec	 ecx

; 465  :         return _Left == _Right;

  00a8a	80 39 5c	 cmp	 BYTE PTR [ecx], 92	; 0000005cH

; 697  :             if (_Traits::eq(*_Match_try, _Ch)) {

  00a8d	75 f2		 jne	 SHORT $LL885@OnLoad
$LN1069@OnLoad:

; 698  :                 return static_cast<size_t>(_Match_try - _Haystack); // found a match

  00a8f	2b ca		 sub	 ecx, edx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp

; 117  : 		if (nPos >= 0)

  00a91	78 76		 js	 SHORT $LN11@OnLoad
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  00a93	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp

; 119  : 			nPos++;

  00a97	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  00a9a	89 85 34 fe ff
	ff		 mov	 DWORD PTR _nPos$1$[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2293 :         if (_Large_string_engaged()) {

  00aa0	72 02		 jb	 SHORT $LN1050@OnLoad

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  00aa2	8b 3f		 mov	 edi, DWORD PTR [edi]
$LN1050@OnLoad:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp

; 120  : 			memcpy(szFileName, c_rstSubFileName.c_str(), nPos);

  00aa4	50		 push	 eax
  00aa5	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _szFileName$[ebp]
  00aab	57		 push	 edi
  00aac	50		 push	 eax
  00aad	e8 00 00 00 00	 call	 _memcpy

; 121  : 			szFileName[nPos] = '\0';

  00ab2	8b bd 34 fe ff
	ff		 mov	 edi, DWORD PTR _nPos$1$[ebp]
  00ab8	83 c4 0c	 add	 esp, 12			; 0000000cH
  00abb	81 ff 00 01 00
	00		 cmp	 edi, 256		; 00000100H
  00ac1	0f 83 26 02 00
	00		 jae	 $LN14@OnLoad
  00ac7	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _szFileName$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2292 :         const value_type* _Result = _Bx._Buf;

  00acd	8b c6		 mov	 eax, esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp

; 121  : 			szFileName[nPos] = '\0';

  00acf	03 cf		 add	 ecx, edi
  00ad1	c6 01 00	 mov	 BYTE PTR [ecx], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  00ad4	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 2293 :         if (_Large_string_engaged()) {

  00ad8	72 02		 jb	 SHORT $LN1057@OnLoad

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  00ada	8b 06		 mov	 eax, DWORD PTR [esi]
$LN1057@OnLoad:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp

; 122  : 			memcpy(szFileName + nPos, c_rstImage.c_str(), c_rstImage.length());

  00adc	ff 76 10	 push	 DWORD PTR [esi+16]
  00adf	50		 push	 eax
  00ae0	51		 push	 ecx
  00ae1	e8 00 00 00 00	 call	 _memcpy

; 123  : 			szFileName[nPos + c_rstImage.length()] = '\0';

  00ae6	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00ae9	83 c4 0c	 add	 esp, 12			; 0000000cH
  00aec	03 c7		 add	 eax, edi
  00aee	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  00af3	0f 83 f4 01 00
	00		 jae	 $LN14@OnLoad

; 124  : 		}

  00af9	8b bd 38 fe ff
	ff		 mov	 edi, DWORD PTR __Result$1$[ebp]
  00aff	c6 84 05 f0 fe
	ff ff 00	 mov	 BYTE PTR _szFileName$[ebp+eax], 0
  00b07	eb 4c		 jmp	 SHORT $LN10@OnLoad
$LN11@OnLoad:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  00b09	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 2292 :         const value_type* _Result = _Bx._Buf;

  00b0d	8b c6		 mov	 eax, esi

; 2293 :         if (_Large_string_engaged()) {

  00b0f	72 02		 jb	 SHORT $LN1043@OnLoad

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  00b11	8b 06		 mov	 eax, DWORD PTR [esi]
$LN1043@OnLoad:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp

; 127  : 			memcpy(szFileName, c_rstImage.c_str(), c_rstImage.length());

  00b13	ff 76 10	 push	 DWORD PTR [esi+16]
  00b16	50		 push	 eax
  00b17	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _szFileName$[ebp]
  00b1d	50		 push	 eax
  00b1e	e8 00 00 00 00	 call	 _memcpy

; 128  : 		}
; 129  : 	}

  00b23	8b bd 38 fe ff
	ff		 mov	 edi, DWORD PTR __Result$1$[ebp]
  00b29	83 c4 0c	 add	 esp, 12			; 0000000cH
  00b2c	eb 27		 jmp	 SHORT $LN10@OnLoad
$LN9@OnLoad:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  00b2e	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 2293 :         if (_Large_string_engaged()) {

  00b32	72 02		 jb	 SHORT $LN899@OnLoad

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  00b34	8b 36		 mov	 esi, DWORD PTR [esi]
$LN899@OnLoad:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp

; 132  : 		_snprintf(szFileName, sizeof(szFileName), "%s%s", m_SearchPath, c_rstImage.c_str());

  00b36	56		 push	 esi
  00b37	68 00 00 00 00	 push	 OFFSET ?m_SearchPath@CGraphicSubImage@@2PADA ; CGraphicSubImage::m_SearchPath
  00b3c	68 00 00 00 00	 push	 OFFSET ??_C@_04HDOCAJNK@?$CFs?$CFs@
  00b41	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _szFileName$[ebp]
  00b47	68 00 01 00 00	 push	 256			; 00000100H
  00b4c	50		 push	 eax
  00b4d	e8 00 00 00 00	 call	 __snprintf
  00b52	83 c4 14	 add	 esp, 20			; 00000014H
$LN10@OnLoad:

; 133  : 	}
; 134  : 
; 135  : 	SetImageFileName(szFileName);

  00b55	8b 8d 1c fe ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00b5b	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _szFileName$[ebp]
  00b61	50		 push	 eax
  00b62	e8 00 00 00 00	 call	 ?SetImageFileName@CGraphicSubImage@@QAE_NPBD@Z ; CGraphicSubImage::SetImageFileName
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  00b67	8b 85 3c fe ff
	ff		 mov	 eax, DWORD PTR __Result$1$[ebp]
  00b6d	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 2293 :         if (_Large_string_engaged()) {

  00b71	72 02		 jb	 SHORT $LN640@OnLoad

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  00b73	8b 00		 mov	 eax, DWORD PTR [eax]
$LN640@OnLoad:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp

; 137  : 	SetRectPosition(atoi(c_rstLeft.c_str()),

  00b75	50		 push	 eax
  00b76	e8 00 00 00 00	 call	 __atoi64
  00b7b	83 c4 04	 add	 esp, 4
  00b7e	89 85 34 fe ff
	ff		 mov	 DWORD PTR tv4900[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  00b84	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H

; 2293 :         if (_Large_string_engaged()) {

  00b88	72 02		 jb	 SHORT $LN647@OnLoad

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  00b8a	8b 3f		 mov	 edi, DWORD PTR [edi]
$LN647@OnLoad:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp

; 137  : 	SetRectPosition(atoi(c_rstLeft.c_str()),

  00b8c	57		 push	 edi
  00b8d	e8 00 00 00 00	 call	 __atoi64
  00b92	8b f8		 mov	 edi, eax
  00b94	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  00b97	8b 85 24 fe ff
	ff		 mov	 eax, DWORD PTR __Result$1$[ebp]
  00b9d	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 2293 :         if (_Large_string_engaged()) {

  00ba1	72 02		 jb	 SHORT $LN654@OnLoad

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  00ba3	8b 00		 mov	 eax, DWORD PTR [eax]
$LN654@OnLoad:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp

; 137  : 	SetRectPosition(atoi(c_rstLeft.c_str()),

  00ba5	50		 push	 eax
  00ba6	e8 00 00 00 00	 call	 __atoi64
  00bab	8b f0		 mov	 esi, eax
  00bad	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  00bb0	8b 85 18 fe ff
	ff		 mov	 eax, DWORD PTR __Result$1$[ebp]
  00bb6	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 2293 :         if (_Large_string_engaged()) {

  00bba	72 02		 jb	 SHORT $LN661@OnLoad

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  00bbc	8b 00		 mov	 eax, DWORD PTR [eax]
$LN661@OnLoad:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp

; 137  : 	SetRectPosition(atoi(c_rstLeft.c_str()),

  00bbe	50		 push	 eax
  00bbf	e8 00 00 00 00	 call	 __atoi64
  00bc4	8b 8d 1c fe ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00bca	83 c4 04	 add	 esp, 4
  00bcd	ff b5 34 fe ff
	ff		 push	 DWORD PTR tv4900[ebp]
  00bd3	57		 push	 edi
  00bd4	56		 push	 esi
  00bd5	50		 push	 eax
  00bd6	e8 00 00 00 00	 call	 ?SetRectPosition@CGraphicSubImage@@QAEXHHHH@Z ; CGraphicSubImage::SetRectPosition

; 142  : 	return true;

  00bdb	8d 8d 04 fe ff
	ff		 lea	 ecx, DWORD PTR _textFileLoader$[ebp]
  00be1	e8 00 00 00 00	 call	 ??1CMemoryTextFileLoader@@UAE@XZ ; CMemoryTextFileLoader::~CMemoryTextFileLoader
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 754  :         _Erase_tree(_Al, _Myhead->_Parent);

  00be6	8b 85 40 fe ff
	ff		 mov	 eax, DWORD PTR _stTokenMap$[ebp]
  00bec	ff 70 04	 push	 DWORD PTR [eax+4]
  00bef	8d 85 40 fe ff
	ff		 lea	 eax, DWORD PTR _stTokenMap$[ebp]
  00bf5	50		 push	 eax
  00bf6	8b c8		 mov	 ecx, eax
  00bf8	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00bfd	6a 40		 push	 64			; 00000040H
  00bff	ff b5 40 fe ff
	ff		 push	 DWORD PTR _stTokenMap$[ebp]
  00c05	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  00c0a	8b b5 28 fe ff
	ff		 mov	 esi, DWORD PTR _stTokenVector$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00c10	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  00c13	85 f6		 test	 esi, esi
  00c15	0f 84 9e 00 00
	00		 je	 $LN576@OnLoad

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);

  00c1b	8b bd 2c fe ff
	ff		 mov	 edi, DWORD PTR _stTokenVector$[ebp+4]
  00c21	3b f7		 cmp	 esi, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 947  :         for (; _First != _Last; ++_First) {

  00c23	74 51		 je	 SHORT $LN580@OnLoad
$LL581@OnLoad:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  00c25	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00c28	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  00c2b	72 2b		 jb	 SHORT $LN600@OnLoad
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00c2d	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00c2f	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00c30	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00c36	72 16		 jb	 SHORT $LN610@OnLoad

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00c38	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00c3b	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00c3e	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00c40	83 c0 fc	 add	 eax, -4			; fffffffcH
  00c43	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00c46	0f 87 a6 00 00
	00		 ja	 $LN630@OnLoad

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00c4c	8b c2		 mov	 eax, edx
$LN610@OnLoad:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00c4e	51		 push	 ecx
  00c4f	50		 push	 eax
  00c50	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00c55	83 c4 08	 add	 esp, 8
$LN600@OnLoad:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5019 :         _My_data._Mysize = 0;

  00c58	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 5020 :         _My_data._Myres  = _BUF_SIZE - 1;

  00c5f	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 5021 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5022 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00c66	c6 06 00	 mov	 BYTE PTR [esi], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 947  :         for (; _First != _Last; ++_First) {

  00c69	83 c6 18	 add	 esi, 24			; 00000018H
  00c6c	3b f7		 cmp	 esi, edi
  00c6e	75 b5		 jne	 SHORT $LL581@OnLoad
  00c70	8b b5 28 fe ff
	ff		 mov	 esi, DWORD PTR _stTokenVector$[ebp]
$LN580@OnLoad:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00c76	8b 8d 30 fe ff
	ff		 mov	 ecx, DWORD PTR _stTokenVector$[ebp+8]
  00c7c	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00c81	2b ce		 sub	 ecx, esi
  00c83	f7 e9		 imul	 ecx
  00c85	c1 fa 02	 sar	 edx, 2
  00c88	8b c2		 mov	 eax, edx
  00c8a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00c8d	03 c2		 add	 eax, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00c8f	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00c92	8b c6		 mov	 eax, esi
  00c94	c1 e1 03	 shl	 ecx, 3

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00c97	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00c9d	72 10		 jb	 SHORT $LN633@OnLoad

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00c9f	8b 70 fc	 mov	 esi, DWORD PTR [eax-4]
  00ca2	83 c1 23	 add	 ecx, 35			; 00000023H
  00ca5	2b c6		 sub	 eax, esi

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00ca7	83 c0 fc	 add	 eax, -4			; fffffffcH
  00caa	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00cad	77 43		 ja	 SHORT $LN630@OnLoad
$LN633@OnLoad:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00caf	51		 push	 ecx
  00cb0	56		 push	 esi
  00cb1	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00cb6	83 c4 08	 add	 esp, 8
$LN576@OnLoad:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp

; 142  : 	return true;

  00cb9	b0 01		 mov	 al, 1
  00cbb	e9 5a f8 ff ff	 jmp	 $LN1@OnLoad
$LN1107@OnLoad:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00cc0	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN1068@OnLoad:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4904 :             _Xlen_string(); // result too long

  00cc5	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN1067@OnLoad:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1630 :             _Throw_tree_length_error();

  00cca	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN1108@OnLoad:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00ccf	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN1109@OnLoad:
  00cd4	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN1110@OnLoad:
  00cd9	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN1111@OnLoad:
  00cde	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN1112@OnLoad:
  00ce3	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN1113@OnLoad:
  00ce8	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN14@OnLoad:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp

; 121  : 			szFileName[nPos] = '\0';

  00ced	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN630@OnLoad:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00cf2	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN1102@OnLoad:
  00cf7	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?OnLoad@CGraphicSubImage@@MAE_NHPBX@Z$0:
  00000	8d 8d 28 fe ff
	ff		 lea	 ecx, DWORD PTR _stTokenVector$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
__unwindfunclet$?OnLoad@CGraphicSubImage@@MAE_NHPBX@Z$1:
  0000b	8d 8d 40 fe ff
	ff		 lea	 ecx, DWORD PTR _stTokenMap$[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@@std@@QAE@XZ
__unwindfunclet$?OnLoad@CGraphicSubImage@@MAE_NHPBX@Z$2:
  00016	8d 8d 04 fe ff
	ff		 lea	 ecx, DWORD PTR _textFileLoader$[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1CMemoryTextFileLoader@@UAE@XZ ; CMemoryTextFileLoader::~CMemoryTextFileLoader
__unwindfunclet$?OnLoad@CGraphicSubImage@@MAE_NHPBX@Z$37:
  00021	8d 8d 14 fe ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  00027	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >
__unwindfunclet$?OnLoad@CGraphicSubImage@@MAE_NHPBX@Z$36:
  0002c	8d 8d 14 fe ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  00032	e9 00 00 00 00	 jmp	 ??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?OnLoad@CGraphicSubImage@@MAE_NHPBX@Z$3:
  00037	8d 8d c0 fe ff
	ff		 lea	 ecx, DWORD PTR $T12[ebp]
  0003d	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?OnLoad@CGraphicSubImage@@MAE_NHPBX@Z$4:
  00042	8d 8d d8 fe ff
	ff		 lea	 ecx, DWORD PTR $T13[ebp]
  00048	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?OnLoad@CGraphicSubImage@@MAE_NHPBX@Z$5:
  0004d	8d 8d a8 fe ff
	ff		 lea	 ecx, DWORD PTR $T11[ebp]
  00053	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?OnLoad@CGraphicSubImage@@MAE_NHPBX@Z$6:
  00058	8d 8d 48 fe ff
	ff		 lea	 ecx, DWORD PTR $T7[ebp]
  0005e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?OnLoad@CGraphicSubImage@@MAE_NHPBX@Z$7:
  00063	8d 8d 90 fe ff
	ff		 lea	 ecx, DWORD PTR $T10[ebp]
  00069	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?OnLoad@CGraphicSubImage@@MAE_NHPBX@Z$8:
  0006e	8d 8d 78 fe ff
	ff		 lea	 ecx, DWORD PTR $T9[ebp]
  00074	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?OnLoad@CGraphicSubImage@@MAE_NHPBX@Z$9:
  00079	8d 8d 60 fe ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  0007f	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00084	cc		 int	 3
  00085	cc		 int	 3
  00086	cc		 int	 3
  00087	cc		 int	 3
  00088	cc		 int	 3
__ehhandler$?OnLoad@CGraphicSubImage@@MAE_NHPBX@Z:
  00089	90		 npad	 1
  0008a	90		 npad	 1
  0008b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0008f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00092	8b 8a 04 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-508]
  00098	33 c8		 xor	 ecx, eax
  0009a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0009f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  000a2	33 c8		 xor	 ecx, eax
  000a4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a9	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?OnLoad@CGraphicSubImage@@MAE_NHPBX@Z
  000ae	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?OnLoad@CGraphicSubImage@@MAE_NHPBX@Z ENDP		; CGraphicSubImage::OnLoad
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ref.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ref.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp
;	COMDAT ?SetImagePointer@CGraphicSubImage@@IAEXPAVCGraphicImage@@@Z
_TEXT	SEGMENT
_pImage$ = 8						; size = 4
?SetImagePointer@CGraphicSubImage@@IAEXPAVCGraphicImage@@@Z PROC ; CGraphicSubImage::SetImagePointer, COMDAT
; _this$ = ecx

; 31   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ref.h

; 69   : 		m_pObject = pObject;

  00006	8b 4d 08	 mov	 ecx, DWORD PTR _pImage$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp

; 31   : {

  00009	57		 push	 edi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ref.h

; 67   : 		CReferenceObject* pOldObject = m_pObject;

  0000a	8b 7e 74	 mov	 edi, DWORD PTR [esi+116]

; 69   : 		m_pObject = pObject;

  0000d	89 4e 74	 mov	 DWORD PTR [esi+116], ecx

; 70   : 
; 71   : 		if (m_pObject)

  00010	85 c9		 test	 ecx, ecx
  00012	74 05		 je	 SHORT $LN6@SetImagePo

; 72   : 		{
; 73   : 			m_pObject->AddReference();

  00014	e8 00 00 00 00	 call	 ?AddReference@CReferenceObject@@QAEXXZ ; CReferenceObject::AddReference
$LN6@SetImagePo:

; 74   : 		}
; 75   : 
; 76   : 		if (pOldObject)

  00019	85 ff		 test	 edi, edi
  0001b	74 07		 je	 SHORT $LN7@SetImagePo

; 77   : 		{
; 78   : 			pOldObject->Release();

  0001d	8b cf		 mov	 ecx, edi
  0001f	e8 00 00 00 00	 call	 ?Release@CReferenceObject@@QAEXXZ ; CReferenceObject::Release
$LN7@SetImagePo:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp

; 33   : 	CreateDeviceObjects();

  00024	8b 06		 mov	 eax, DWORD PTR [esi]
  00026	8b ce		 mov	 ecx, esi
  00028	ff 50 0c	 call	 DWORD PTR [eax+12]
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi

; 34   : }

  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
?SetImagePointer@CGraphicSubImage@@IAEXPAVCGraphicImage@@@Z ENDP ; CGraphicSubImage::SetImagePointer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp
;	COMDAT ?SetSearchPath@CGraphicSubImage@@SAXPBD@Z
_TEXT	SEGMENT
_c_szFileName$ = 8					; size = 4
?SetSearchPath@CGraphicSubImage@@SAXPBD@Z PROC		; CGraphicSubImage::SetSearchPath, COMDAT

; 63   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 64   : 	strncpy(m_SearchPath, c_szFileName, sizeof(m_SearchPath) - 1);

  00003	68 ff 00 00 00	 push	 255			; 000000ffH
  00008	ff 75 08	 push	 DWORD PTR _c_szFileName$[ebp]
  0000b	68 00 00 00 00	 push	 OFFSET ?m_SearchPath@CGraphicSubImage@@2PADA ; CGraphicSubImage::m_SearchPath
  00010	e8 00 00 00 00	 call	 _strncpy
  00015	83 c4 0c	 add	 esp, 12			; 0000000cH

; 65   : }

  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
?SetSearchPath@CGraphicSubImage@@SAXPBD@Z ENDP		; CGraphicSubImage::SetSearchPath
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp
;	COMDAT ?SetRectReference@CGraphicSubImage@@QAEXABUtagRECT@@@Z
_TEXT	SEGMENT
_c_rRect$ = 8						; size = 4
?SetRectReference@CGraphicSubImage@@QAEXABUtagRECT@@@Z PROC ; CGraphicSubImage::SetRectReference, COMDAT
; _this$ = ecx

; 58   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 59   : 	m_rect = c_rRect;

  00003	8b 45 08	 mov	 eax, DWORD PTR _c_rRect$[ebp]
  00006	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00009	0f 11 41 60	 movups	 XMMWORD PTR [ecx+96], xmm0

; 60   : }

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
?SetRectReference@CGraphicSubImage@@QAEXABUtagRECT@@@Z ENDP ; CGraphicSubImage::SetRectReference
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp
;	COMDAT ?SetRectPosition@CGraphicSubImage@@QAEXHHHH@Z
_TEXT	SEGMENT
_left$ = 8						; size = 4
_top$ = 12						; size = 4
_right$ = 16						; size = 4
_bottom$ = 20						; size = 4
?SetRectPosition@CGraphicSubImage@@QAEXHHHH@Z PROC	; CGraphicSubImage::SetRectPosition, COMDAT
; _this$ = ecx

; 50   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 51   : 	m_rect.left = left;

  00003	8b 45 08	 mov	 eax, DWORD PTR _left$[ebp]
  00006	89 41 60	 mov	 DWORD PTR [ecx+96], eax

; 52   : 	m_rect.top = top;

  00009	8b 45 0c	 mov	 eax, DWORD PTR _top$[ebp]
  0000c	89 41 64	 mov	 DWORD PTR [ecx+100], eax

; 53   : 	m_rect.right = right;

  0000f	8b 45 10	 mov	 eax, DWORD PTR _right$[ebp]
  00012	89 41 68	 mov	 DWORD PTR [ecx+104], eax

; 54   : 	m_rect.bottom = bottom;

  00015	8b 45 14	 mov	 eax, DWORD PTR _bottom$[ebp]
  00018	89 41 6c	 mov	 DWORD PTR [ecx+108], eax

; 55   : }

  0001b	5d		 pop	 ebp
  0001c	c2 10 00	 ret	 16			; 00000010H
?SetRectPosition@CGraphicSubImage@@QAEXHHHH@Z ENDP	; CGraphicSubImage::SetRectPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp
;	COMDAT ?SetImageFileName@CGraphicSubImage@@QAE_NPBD@Z
_TEXT	SEGMENT
_c_szFileName$ = 8					; size = 4
?SetImageFileName@CGraphicSubImage@@QAE_NPBD@Z PROC	; CGraphicSubImage::SetImageFileName, COMDAT
; _this$ = ecx

; 37   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 38   : 	CResource* pResource = CResourceManager::Instance().GetResourcePointer(c_szFileName);

  00005	ff 75 08	 push	 DWORD PTR _c_szFileName$[ebp]
  00008	8b f9		 mov	 edi, ecx
  0000a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A ; CSingleton<CResourceManager>::ms_singleton
  00010	e8 00 00 00 00	 call	 ?GetResourcePointer@CResourceManager@@QAEPAVCResource@@PBD@Z ; CResourceManager::GetResourcePointer
  00015	8b f0		 mov	 esi, eax

; 39   : 
; 40   : 	if (!pResource->IsType(CGraphicImage::Type()))

  00017	e8 00 00 00 00	 call	 ?Type@CGraphicImage@@SAKXZ ; CGraphicImage::Type
  0001c	50		 push	 eax
  0001d	8b ce		 mov	 ecx, esi
  0001f	e8 00 00 00 00	 call	 ?IsType@CResource@@QAE_NK@Z ; CResource::IsType
  00024	84 c0		 test	 al, al
  00026	75 06		 jne	 SHORT $LN2@SetImageFi

; 47   : }

  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
$LN2@SetImageFi:

; 41   : 	{
; 42   : 		return false;
; 43   : 	}
; 44   : 
; 45   : 	SetImagePointer(static_cast<CGraphicImage*>(pResource));

  0002e	56		 push	 esi
  0002f	8b cf		 mov	 ecx, edi
  00031	e8 00 00 00 00	 call	 ?SetImagePointer@CGraphicSubImage@@IAEXPAVCGraphicImage@@@Z ; CGraphicSubImage::SetImagePointer
  00036	5f		 pop	 edi

; 46   : 	return true;

  00037	b0 01		 mov	 al, 1

; 47   : }

  00039	5e		 pop	 esi
  0003a	5d		 pop	 ebp
  0003b	c2 04 00	 ret	 4
?SetImageFileName@CGraphicSubImage@@QAE_NPBD@Z ENDP	; CGraphicSubImage::SetImageFileName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp
;	COMDAT ?CreateDeviceObjects@CGraphicSubImage@@UAE_NXZ
_TEXT	SEGMENT
?CreateDeviceObjects@CGraphicSubImage@@UAE_NXZ PROC	; CGraphicSubImage::CreateDeviceObjects, COMDAT
; _this$ = ecx

; 25   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 26   : 	m_imageTexture.CreateFromTexturePointer(m_roImage->GetTexturePointer());

  00003	8b 4e 74	 mov	 ecx, DWORD PTR [esi+116]
  00006	e8 00 00 00 00	 call	 ?GetTexturePointer@CGraphicImage@@QAEPAVCGraphicTexture@@XZ ; CGraphicImage::GetTexturePointer
  0000b	50		 push	 eax
  0000c	8d 4e 2c	 lea	 ecx, DWORD PTR [esi+44]
  0000f	e8 00 00 00 00	 call	 ?CreateFromTexturePointer@CGraphicImageTexture@@QAEXPBVCGraphicTexture@@@Z ; CGraphicImageTexture::CreateFromTexturePointer

; 27   : 	return true;

  00014	b0 01		 mov	 al, 1
  00016	5e		 pop	 esi

; 28   : }

  00017	c3		 ret	 0
?CreateDeviceObjects@CGraphicSubImage@@UAE_NXZ ENDP	; CGraphicSubImage::CreateDeviceObjects
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ref.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp
;	COMDAT ??1CGraphicSubImage@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CGraphicSubImage@@UAE@XZ PROC			; CGraphicSubImage::~CGraphicSubImage, COMDAT
; _this$ = ecx

; 20   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CGraphicSubImage@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
  00025	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CGraphicSubImage@@6B@
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ref.h

; 67   : 		CReferenceObject* pOldObject = m_pObject;

  0002b	8b 4e 74	 mov	 ecx, DWORD PTR [esi+116]

; 68   : 
; 69   : 		m_pObject = pObject;

  0002e	c7 46 74 00 00
	00 00		 mov	 DWORD PTR [esi+116], 0

; 70   : 
; 71   : 		if (m_pObject)
; 72   : 		{
; 73   : 			m_pObject->AddReference();
; 74   : 		}
; 75   : 
; 76   : 		if (pOldObject)

  00035	85 c9		 test	 ecx, ecx
  00037	74 05		 je	 SHORT $LN7@CGraphicSu

; 77   : 		{
; 78   : 			pOldObject->Release();

  00039	e8 00 00 00 00	 call	 ?Release@CReferenceObject@@QAEXXZ ; CReferenceObject::Release
$LN7@CGraphicSu:

; 53   : 		if (m_pObject)

  0003e	8b 4e 74	 mov	 ecx, DWORD PTR [esi+116]

; 37   : 	{

  00041	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 53   : 		if (m_pObject)

  00048	85 c9		 test	 ecx, ecx
  0004a	74 0c		 je	 SHORT $LN13@CGraphicSu

; 54   : 		{
; 55   : 			m_pObject->Release();

  0004c	e8 00 00 00 00	 call	 ?Release@CReferenceObject@@QAEXXZ ; CReferenceObject::Release

; 56   : 			m_pObject = NULL;

  00051	c7 46 74 00 00
	00 00		 mov	 DWORD PTR [esi+116], 0
$LN13@CGraphicSu:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp

; 22   : }

  00058	8b ce		 mov	 ecx, esi
  0005a	e8 00 00 00 00	 call	 ??1CGraphicImage@@UAE@XZ ; CGraphicImage::~CGraphicImage
  0005f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00069	59		 pop	 ecx
  0006a	5e		 pop	 esi
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
  0006f	cc		 int	 3
  00070	cc		 int	 3
  00071	cc		 int	 3
  00072	cc		 int	 3
  00073	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CGraphicSubImage@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CGraphicSubImage@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CGraphicSubImage@@UAE@XZ ENDP			; CGraphicSubImage::~CGraphicSubImage
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ref.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp
;	COMDAT ??0CGraphicSubImage@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_c_szFileName$ = 8					; size = 4
??0CGraphicSubImage@@QAE@PBD@Z PROC			; CGraphicSubImage::CGraphicSubImage, COMDAT
; _this$ = ecx

; 16   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	6a 03		 push	 3
  00007	ff 75 08	 push	 DWORD PTR _c_szFileName$[ebp]
  0000a	8b f1		 mov	 esi, ecx
  0000c	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  0000f	e8 00 00 00 00	 call	 ??0CGraphicImage@@QAE@PBDK@Z ; CGraphicImage::CGraphicImage
  00014	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CGraphicSubImage@@6B@

; 17   : }

  0001a	8b c6		 mov	 eax, esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ref.h

; 20   : 	CRef() : m_pObject(NULL)

  0001c	c7 46 74 00 00
	00 00		 mov	 DWORD PTR [esi+116], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp

; 17   : }

  00023	5e		 pop	 esi
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
??0CGraphicSubImage@@QAE@PBD@Z ENDP			; CGraphicSubImage::CGraphicSubImage
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpSubImage.cpp
;	COMDAT ?Type@CGraphicSubImage@@SAKXZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
?Type@CGraphicSubImage@@SAKXZ PROC			; CGraphicSubImage::Type, COMDAT

; 10   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Type@CGraphicSubImage@@SAKXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 11   : 	static TType s_type = StringToType("CGraphicSubImage");

  00022	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__tls_array
  00028	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __tls_index
  0002e	8b 0c 88	 mov	 ecx, DWORD PTR [eax+ecx*4]
  00031	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$TSS0@?1??Type@CGraphicSubImage@@SAKXZ@4HA
  00036	3b 81 00 00 00
	00		 cmp	 eax, DWORD PTR __Init_thread_epoch[ecx]
  0003c	7f 14		 jg	 SHORT $LN9@Type
$LN5@Type:

; 12   : 	return s_type;
; 13   : }

  0003e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?s_type@?1??Type@CGraphicSubImage@@SAKXZ@4KA
  00043	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00046	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004d	59		 pop	 ecx
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
$LN9@Type:

; 11   : 	static TType s_type = StringToType("CGraphicSubImage");

  00052	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??Type@CGraphicSubImage@@SAKXZ@4HA
  00057	e8 00 00 00 00	 call	 __Init_thread_header
  0005c	83 c4 04	 add	 esp, 4
  0005f	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS0@?1??Type@CGraphicSubImage@@SAKXZ@4HA, -1
  00066	75 d6		 jne	 SHORT $LN5@Type
  00068	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@PNJLMPJB@CGraphicSubImage@
  0006d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00074	e8 00 00 00 00	 call	 ?StringToType@CResource@@SAKPBD@Z ; CResource::StringToType
  00079	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??Type@CGraphicSubImage@@SAKXZ@4HA
  0007e	a3 00 00 00 00	 mov	 DWORD PTR ?s_type@?1??Type@CGraphicSubImage@@SAKXZ@4KA, eax
  00083	e8 00 00 00 00	 call	 __Init_thread_footer
  00088	83 c4 08	 add	 esp, 8
  0008b	eb b1		 jmp	 SHORT $LN5@Type
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Type@CGraphicSubImage@@SAKXZ$0:
  00000	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??Type@CGraphicSubImage@@SAKXZ@4HA
  00005	e8 00 00 00 00	 call	 __Init_thread_abort
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
  0000c	cc		 int	 3
  0000d	cc		 int	 3
  0000e	cc		 int	 3
  0000f	cc		 int	 3
  00010	cc		 int	 3
__ehhandler$?Type@CGraphicSubImage@@SAKXZ:
  00011	90		 npad	 1
  00012	90		 npad	 1
  00013	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00017	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001a	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Type@CGraphicSubImage@@SAKXZ
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Type@CGraphicSubImage@@SAKXZ ENDP			; CGraphicSubImage::Type
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = ecx

; 829  :     _CONSTEXPR20 ~vector() noexcept {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  00004	8b 37		 mov	 esi, DWORD PTR [edi]
  00006	85 f6		 test	 esi, esi
  00008	0f 84 a6 00 00
	00		 je	 $LN4@vector

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);

  0000e	53		 push	 ebx
  0000f	8b 5f 04	 mov	 ebx, DWORD PTR [edi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 947  :         for (; _First != _Last; ++_First) {

  00012	3b f3		 cmp	 esi, ebx
  00014	74 47		 je	 SHORT $LN8@vector
$LL9@vector:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  00016	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00019	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  0001c	72 27		 jb	 SHORT $LN28@vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0001e	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00020	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00021	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00027	72 12		 jb	 SHORT $LN38@vector

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00029	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0002c	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0002f	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00031	83 c0 fc	 add	 eax, -4			; fffffffcH
  00034	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00037	77 7e		 ja	 SHORT $LN58@vector

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00039	8b c2		 mov	 eax, edx
$LN38@vector:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0003b	51		 push	 ecx
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00042	83 c4 08	 add	 esp, 8
$LN28@vector:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5019 :         _My_data._Mysize = 0;

  00045	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 5020 :         _My_data._Myres  = _BUF_SIZE - 1;

  0004c	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 5021 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5022 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00053	c6 06 00	 mov	 BYTE PTR [esi], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 947  :         for (; _First != _Last; ++_First) {

  00056	83 c6 18	 add	 esi, 24			; 00000018H
  00059	3b f3		 cmp	 esi, ebx
  0005b	75 b9		 jne	 SHORT $LL9@vector
$LN8@vector:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0005d	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00060	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00065	8b 37		 mov	 esi, DWORD PTR [edi]
  00067	2b ce		 sub	 ecx, esi
  00069	f7 e9		 imul	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0006b	5b		 pop	 ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0006c	c1 fa 02	 sar	 edx, 2
  0006f	8b c2		 mov	 eax, edx
  00071	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00074	03 c2		 add	 eax, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00076	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00079	c1 e1 03	 shl	 ecx, 3

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0007c	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00082	72 12		 jb	 SHORT $LN61@vector

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00084	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00087	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0008a	2b f2		 sub	 esi, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0008c	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  0008f	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00092	77 23		 ja	 SHORT $LN58@vector

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00094	8b f2		 mov	 esi, edx
$LN61@vector:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00096	51		 push	 ecx
  00097	56		 push	 esi
  00098	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  0009d	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  000a3	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  000a6	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 2114 :             _Myend   = nullptr;

  000ad	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
$LN4@vector:
  000b4	5f		 pop	 edi

; 835  :     }

  000b5	5e		 pop	 esi
  000b6	c3		 ret	 0
$LN58@vector:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000b7	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN69@vector:
  000bc	cc		 int	 3
??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 127  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 128  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 129  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 130  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 77   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 131  :         _Throw_bad_array_new_length(); // add overflow
; 132  :     }
; 133  : 
; 134  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 77   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 136  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 137  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 138  : 
; 139  : #ifdef _DEBUG
; 140  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 141  : #endif // _DEBUG
; 142  :     return _Ptr;
; 143  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ?_Throw_tree_length_error@std@@YAXXZ
_TEXT	SEGMENT
?_Throw_tree_length_error@std@@YAXXZ PROC		; std::_Throw_tree_length_error, COMDAT

; 418  :     _Xlength_error("map/set too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@GCADKGJO@map?1set?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Throw_tree:
  0000a	cc		 int	 3
?_Throw_tree_length_error@std@@YAXXZ ENDP		; std::_Throw_tree_length_error
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ?_Equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NQBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NQBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Equal, COMDAT
; _this$ = ecx

; 4757 :     _CONSTEXPR20 bool _Equal(_In_z_ const _Elem* const _Ptr) const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 415  :             return __builtin_strlen(_First);

  00004	8b 75 08	 mov	 esi, DWORD PTR __Ptr$[ebp]

; 4757 :     _CONSTEXPR20 bool _Equal(_In_z_ const _Elem* const _Ptr) const noexcept {

  00007	57		 push	 edi

; 415  :             return __builtin_strlen(_First);

  00008	8b fe		 mov	 edi, esi
  0000a	8d 57 01	 lea	 edx, DWORD PTR [edi+1]
  0000d	0f 1f 00	 npad	 3
$LL16@Equal:
  00010	8a 07		 mov	 al, BYTE PTR [edi]
  00012	47		 inc	 edi
  00013	84 c0		 test	 al, al
  00015	75 f9		 jne	 SHORT $LL16@Equal
  00017	2b fa		 sub	 edi, edx

; 2301 :         return _BUF_SIZE <= _Myres;

  00019	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H

; 4758 :         // compare [0, size()) with _Ptr for equality
; 4759 :         return _Traits_equal<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize, _Ptr, _Traits::length(_Ptr));

  0001d	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]

; 2293 :         if (_Large_string_engaged()) {

  00020	72 02		 jb	 SHORT $LN6@Equal

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  00022	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN6@Equal:

; 595  :     return _Left_size == _Right_size && _Traits::compare(_Left, _Right, _Left_size) == 0;

  00024	3b d7		 cmp	 edx, edi
  00026	75 60		 jne	 SHORT $LN12@Equal

; 395  :         return __builtin_memcmp(_First1, _First2, _Count);

  00028	83 ea 04	 sub	 edx, 4
  0002b	72 14		 jb	 SHORT $LN19@Equal
  0002d	0f 1f 00	 npad	 3
$LL20@Equal:
  00030	8b 01		 mov	 eax, DWORD PTR [ecx]
  00032	3b 06		 cmp	 eax, DWORD PTR [esi]
  00034	75 10		 jne	 SHORT $LN18@Equal
  00036	83 c1 04	 add	 ecx, 4
  00039	83 c6 04	 add	 esi, 4
  0003c	83 ea 04	 sub	 edx, 4
  0003f	73 ef		 jae	 SHORT $LL20@Equal
$LN19@Equal:
  00041	83 fa fc	 cmp	 edx, -4			; fffffffcH
  00044	74 34		 je	 SHORT $LN17@Equal
$LN18@Equal:
  00046	8a 01		 mov	 al, BYTE PTR [ecx]
  00048	3a 06		 cmp	 al, BYTE PTR [esi]
  0004a	75 27		 jne	 SHORT $LN21@Equal
  0004c	83 fa fd	 cmp	 edx, -3			; fffffffdH
  0004f	74 29		 je	 SHORT $LN17@Equal
  00051	8a 41 01	 mov	 al, BYTE PTR [ecx+1]
  00054	3a 46 01	 cmp	 al, BYTE PTR [esi+1]
  00057	75 1a		 jne	 SHORT $LN21@Equal
  00059	83 fa fe	 cmp	 edx, -2			; fffffffeH
  0005c	74 1c		 je	 SHORT $LN17@Equal
  0005e	8a 41 02	 mov	 al, BYTE PTR [ecx+2]
  00061	3a 46 02	 cmp	 al, BYTE PTR [esi+2]
  00064	75 0d		 jne	 SHORT $LN21@Equal
  00066	83 fa ff	 cmp	 edx, -1
  00069	74 0f		 je	 SHORT $LN17@Equal
  0006b	8a 41 03	 mov	 al, BYTE PTR [ecx+3]
  0006e	3a 46 03	 cmp	 al, BYTE PTR [esi+3]
  00071	74 07		 je	 SHORT $LN17@Equal
$LN21@Equal:
  00073	1b c0		 sbb	 eax, eax
  00075	83 c8 01	 or	 eax, 1
  00078	eb 02		 jmp	 SHORT $LN22@Equal
$LN17@Equal:
  0007a	33 c0		 xor	 eax, eax
$LN22@Equal:

; 595  :     return _Left_size == _Right_size && _Traits::compare(_Left, _Right, _Left_size) == 0;

  0007c	85 c0		 test	 eax, eax
  0007e	75 08		 jne	 SHORT $LN12@Equal
  00080	5f		 pop	 edi
  00081	b0 01		 mov	 al, 1

; 4760 :     }

  00083	5e		 pop	 esi
  00084	5d		 pop	 ebp
  00085	c2 04 00	 ret	 4
$LN12@Equal:
  00088	5f		 pop	 edi

; 595  :     return _Left_size == _Right_size && _Traits::compare(_Left, _Right, _Left_size) == 0;

  00089	32 c0		 xor	 al, al

; 4760 :     }

  0008b	5e		 pop	 esi
  0008c	5d		 pop	 ebp
  0008d	c2 04 00	 ret	 4
?_Equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NQBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Equal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 3270 :     _CONSTEXPR20 ~basic_string() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2301 :         return _BUF_SIZE <= _Myres;

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  00009	72 27		 jb	 SHORT $LN12@basic_stri
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0000d	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0000e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00014	72 12		 jb	 SHORT $LN22@basic_stri

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00016	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00019	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001c	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00021	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00024	77 1f		 ja	 SHORT $LN19@basic_stri

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00026	8b c2		 mov	 eax, edx
$LN22@basic_stri:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00028	51		 push	 ecx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	83 c4 08	 add	 esp, 8
$LN12@basic_stri:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5019 :         _My_data._Mysize = 0;

  00032	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 5020 :         _My_data._Myres  = _BUF_SIZE - 1;

  00039	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 5021 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5022 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00040	c6 06 00	 mov	 BYTE PTR [esi], 0
  00043	5e		 pop	 esi

; 3278 :     }

  00044	c3		 ret	 0
$LN19@basic_stri:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00045	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN27@basic_stri:
  0004a	cc		 int	 3
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Result$1$ = 8						; size = 4
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2626 :         : _Mypair(_One_then_variadic_args_t{}, _Alty_traits::select_on_container_copy_construction(_Right._Getal())) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2627 :         _Construct<_Construct_strategy::_From_string>(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	53		 push	 ebx
  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx
  0000d	89 45 08	 mov	 DWORD PTR __Result$1$[ebp], eax

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00010	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0

; 2349 :     size_type _Mysize = 0; // current length of string

  00013	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 2350 :     size_type _Myres  = 0; // current storage reserved for string

  0001a	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2301 :         return _BUF_SIZE <= _Myres;

  00021	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 2627 :         _Construct<_Construct_strategy::_From_string>(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00025	8b 58 10	 mov	 ebx, DWORD PTR [eax+16]

; 2293 :         if (_Large_string_engaged()) {

  00028	72 05		 jb	 SHORT $LN12@basic_stri

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  0002a	8b 00		 mov	 eax, DWORD PTR [eax]
  0002c	89 45 08	 mov	 DWORD PTR __Result$1$[ebp], eax
$LN12@basic_stri:

; 2740 :         if (_Count > max_size()) {

  0002f	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH
  00035	0f 87 9d 00 00
	00		 ja	 $LN44@basic_stri

; 2742 :         }
; 2743 : 
; 2744 :         auto& _Al       = _Getal();
; 2745 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 2746 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 2747 : 
; 2748 :         if (_Count < _BUF_SIZE) {

  0003b	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH
  00042	83 fb 10	 cmp	 ebx, 16			; 00000010H
  00045	73 17		 jae	 SHORT $LN18@basic_stri

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00047	6a 10		 push	 16			; 00000010H
  00049	50		 push	 eax
  0004a	57		 push	 edi

; 2749 :             _My_data._Mysize = _Count;

  0004b	89 5f 10	 mov	 DWORD PTR [edi+16], ebx

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  0004e	e8 00 00 00 00	 call	 _memmove
  00053	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2628 :     }

  00056	8b c7		 mov	 eax, edi
  00058	5f		 pop	 edi
  00059	5b		 pop	 ebx
  0005a	5d		 pop	 ebp
  0005b	c2 04 00	 ret	 4
$LN18@basic_stri:
  0005e	56		 push	 esi

; 4883 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  0005f	8b f3		 mov	 esi, ebx
  00061	83 ce 0f	 or	 esi, 15			; 0000000fH
  00064	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 4884 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  0006a	76 17		 jbe	 SHORT $LN25@basic_stri

; 4885 :             return _Max;

  0006c	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00071	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00076	50		 push	 eax
  00077	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0007c	83 c4 04	 add	 esp, 4
  0007f	8b c8		 mov	 ecx, eax
  00081	eb 34		 jmp	 SHORT $LN32@basic_stri
$LN25@basic_stri:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 43   :     return _Left < _Right ? _Right : _Left;

  00083	b8 16 00 00 00	 mov	 eax, 22			; 00000016H
  00088	3b f0		 cmp	 esi, eax
  0008a	0f 42 f0	 cmovb	 esi, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2772 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  0008d	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00090	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00095	72 0d		 jb	 SHORT $LN33@basic_stri

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00097	50		 push	 eax
  00098	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0009d	83 c4 04	 add	 esp, 4
  000a0	8b c8		 mov	 ecx, eax
  000a2	eb 13		 jmp	 SHORT $LN32@basic_stri
$LN33@basic_stri:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  000a4	85 c0		 test	 eax, eax
  000a6	74 0d		 je	 SHORT $LN34@basic_stri

; 77   :         return ::operator new(_Bytes);

  000a8	50		 push	 eax
  000a9	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000ae	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  000b1	8b c8		 mov	 ecx, eax
  000b3	eb 02		 jmp	 SHORT $LN32@basic_stri
$LN34@basic_stri:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  000b5	33 c9		 xor	 ecx, ecx
$LN32@basic_stri:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2790 :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count + 1);

  000b7	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
  000ba	89 0f		 mov	 DWORD PTR [edi], ecx

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000bc	50		 push	 eax
  000bd	ff 75 08	 push	 DWORD PTR __Result$1$[ebp]

; 2781 :         _My_data._Mysize = _Count;

  000c0	89 5f 10	 mov	 DWORD PTR [edi+16], ebx

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000c3	51		 push	 ecx

; 2782 :         _My_data._Myres  = _New_capacity;

  000c4	89 77 14	 mov	 DWORD PTR [edi+20], esi

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000c7	e8 00 00 00 00	 call	 _memcpy
  000cc	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2628 :     }

  000cf	8b c7		 mov	 eax, edi

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000d1	5e		 pop	 esi

; 2628 :     }

  000d2	5f		 pop	 edi
  000d3	5b		 pop	 ebx
  000d4	5d		 pop	 ebp
  000d5	c2 04 00	 ret	 4
$LN44@basic_stri:

; 2741 :             _Xlen_string(); // result too long

  000d8	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN42@basic_stri:
  000dd	cc		 int	 3
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 2368 :     _Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen_strin:
  0000a	cc		 int	 3
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 323  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 324  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\stdio.h
;	COMDAT __snprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__snprintf PROC						; COMDAT

; 1947 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1392 :         int const _Result = __stdio_common_vsprintf(

  00003	8d 45 14	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 10	 push	 DWORD PTR __Format$[ebp]
  0000c	ff 75 0c	 push	 DWORD PTR __BufferCount$[ebp]
  0000f	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00012	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	ff 70 04	 push	 DWORD PTR [eax+4]
  0001c	83 c9 01	 or	 ecx, 1
  0001f	51		 push	 ecx
  00020	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1393 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1394 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1395 : 
; 1396 :         return _Result < 0 ? -1 : _Result;

  00025	83 c9 ff	 or	 ecx, -1
  00028	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002b	85 c0		 test	 eax, eax
  0002d	0f 48 c1	 cmovs	 eax, ecx

; 1948 :         int _Result;
; 1949 :         va_list _ArgList;
; 1950 :         __crt_va_start(_ArgList, _Format);
; 1951 :         _Result = _vsnprintf(_Buffer, _BufferCount, _Format, _ArgList);
; 1952 :         __crt_va_end(_ArgList);
; 1953 :         return _Result;
; 1954 :     }

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
__snprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

  00005	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
