#ifndef __INC_METIN_II_LENGTH_H__
#define __INC_METIN_II_LENGTH_H__

#include "CommonDefines.h"
#ifdef __SPECIAL_STORAGE_ENABLE__
	#include <utility>
#endif
#include "game_type.hpp"

#define WORD_MAX 0xffff

//LIMIT_GOLD
#ifdef __EXTANDED_GOLD_AMOUNT__
	const int64_t GOLD_MAX = 9999999999999999LL;
#else
	const int GOLD_MAX = 2000000000,
#endif

enum EMisc
{
	MAX_HOST_LENGTH			= 15,
	IP_ADDRESS_LENGTH		= 15,
	LOGIN_MAX_LEN			= 30,
	PASSWD_MAX_LEN			= 16,
#ifdef __ENABLE_PLAYER_PER_ACCOUNT5__
	PLAYER_PER_ACCOUNT		= 5,
#else
	PLAYER_PER_ACCOUNT		= 4,
#endif
	ACCOUNT_STATUS_MAX_LEN	= 8,
	CHARACTER_NAME_MAX_LEN	= 32,
	SHOP_SIGN_MAX_LEN		= 32,
	INVENTORY_PAGE_COLUMN	= 5, // 5 (default)
	INVENTORY_PAGE_ROW		= 9, // 9 (default)
	INVENTORY_PAGE_SIZE		= INVENTORY_PAGE_COLUMN * INVENTORY_PAGE_ROW,
#ifdef __ENABLE_EXTEND_INVEN_SYSTEM__
	INVENTORY_PAGE_COUNT	= 4, // 2 (default)
#else
	INVENTORY_PAGE_COUNT	= 2, // 2 (default)
#endif
	INVENTORY_MAX_NUM		= INVENTORY_PAGE_SIZE * INVENTORY_PAGE_COUNT, // 90 (default)
	ABILITY_MAX_NUM			= 50,
	EMPIRE_MAX_NUM			= 4,
	BANWORD_MAX_LEN			= 24,
	SMS_MAX_LEN				= 80,
	MOBILE_MAX_LEN			= 32,
	SOCIAL_ID_MAX_LEN		= 18,

	GUILD_NAME_MAX_LEN		= 12,

	SHOP_HOST_ITEM_MAX_NUM	= 40,
	SHOP_GUEST_ITEM_MAX_NUM = 18,

	SHOP_PRICELIST_MAX_NUM	= 40,

	CHAT_MAX_LEN			= 512,

	QUICKSLOT_MAX_NUM		= 36,

	JOURNAL_MAX_NUM			= 2,

	QUERY_MAX_LEN			= 8192,

	FILE_MAX_LEN			= 128,

	PLAYER_EXP_TABLE_MAX	= 120,
	PLAYER_MAX_LEVEL_CONST	= 250,

	GUILD_MAX_LEVEL			= 20,
	MOB_MAX_LEVEL			= 100,

	ATTRIBUTE_MAX_VALUE		= 20,
	CHARACTER_PATH_MAX_NUM	= 64,
	SKILL_MAX_NUM			= 255,
	SKILL_MAX_LEVEL			= 40,

	APPLY_NAME_MAX_LEN		= 32,
	EVENT_FLAG_NAME_MAX_LEN = 32,

	MOB_SKILL_MAX_NUM		= 5,

	POINT_MAX_NUM = 255,
	DRAGON_SOUL_BOX_SIZE = 32,
	DRAGON_SOUL_BOX_COLUMN_NUM = 8,
	DRAGON_SOUL_BOX_ROW_NUM = DRAGON_SOUL_BOX_SIZE / DRAGON_SOUL_BOX_COLUMN_NUM,
	DRAGON_SOUL_REFINE_GRID_SIZE = 15,
	MAX_AMOUNT_OF_MALL_BONUS	= 20,

	WEAR_MAX_NUM				= 32,

	MAX_PASSPOD = 8,


	//END_LIMIT_GOLD

	OPENID_AUTHKEY_LEN = 32,

	SHOP_TAB_NAME_MAX = 32,
	SHOP_TAB_COUNT_MAX = 3,

	BELT_INVENTORY_SLOT_WIDTH = 4,
	BELT_INVENTORY_SLOT_HEIGHT = 4,

	BELT_INVENTORY_SLOT_COUNT = BELT_INVENTORY_SLOT_WIDTH * BELT_INVENTORY_SLOT_HEIGHT,


#ifdef __SPECIAL_STORAGE_ENABLE__
	SPECIAL_STORAGE_PAGE_LENGTH = 5,
	SPECIAL_STORAGE_PAGE_BREADTH = 9,
	SPECIAL_STORAGE_PAGE_SIZE = SPECIAL_STORAGE_PAGE_LENGTH * SPECIAL_STORAGE_PAGE_BREADTH,
	SPECIAL_STORAGE_PAGE_COUNT = 4,
#endif

#ifdef __ADMIN_MANAGER__
	BLOCK_DESC_MAX_LEN = 128,
	BLOCK_PROOF_MAX_LEN = 256,
#endif

#ifdef __ENABLE_FIND_LETTERS_EVENT__
	FIND_LETTERS_SLOTS_NUM = 20,
	FIND_LETTERS_MAX_SIZE = 20,
	FIND_LETTERS_MAX_WORD_SIZE = 10,
#endif

#ifdef __ENABLE_LUCKY_BOX__
	LUCKY_BOX_MAX_NUM = 16,
#endif

#ifdef __ENABLE_OFFLINE_SHOP__
	OFFLINE_SHOP_ITEM_WIDTH = 10,
	OFFLINE_SHOP_ITEM_HEIGHT = 9,
	OFFLINE_SHOP_ITEM_COUNT = OFFLINE_SHOP_ITEM_WIDTH * OFFLINE_SHOP_ITEM_HEIGHT,
	OFFLINE_SHOP_NAME_CHANGE_TIMELIMIT = 60 * 60,
#endif

#ifdef __HARDWARE_BAN__
	HDID_MAX_LEN = 255,
#endif

	BAN_REASON_MAX_LEN = 61,
};

#ifdef __ENABLE_MULTI_LANGUAGE_SYSTEM__
enum ELocales
{
	LC_ENGLISH,
	LC_GERMANY,
	LC_ROMANIA,
	LC_POLAND,
	LC_TURKISCH,
	LC_CZECH,
	LC_SPANISH,
	LC_FRANCE,
	LC_GREEK,
	LC_HUNGARIAN,
	LC_ITALY,
	LC_PORTUGAL,
	LC_DANISH,

	LC_COUNT,
	LC_DEFAULT = LC_ENGLISH,
};
#endif

#ifdef __ENABLE_SWITCHBOT__
enum SwitchbotValues
{
	SWITCHBOT_SLOT_COUNT = 5,
	SWITCHBOT_ALTERNATIVE_COUNT = 2,
	//1 = Switching Item
	//2 = Yang
	SWITCHBOT_PRICE_TYPE = 1,
	//Amount Swtichting Items the Yang-Price
	SWITCHBOT_PRICE_AMOUNT = 1,
};

const DWORD c_arSwitchingItems[5] =
{
	39028,
	71084,
	76014,
	71151,
	76023
};
#endif

#ifdef __ENABLE_CUBE_RENEWAL__
enum ECubeCategoryEnum
{
	CUBE_WEAPONPVP,
	CUBE_ARMORPVM,
	CUBE_ARMORPVP,

	CUBE_ACCESSORYPVM,
	CUBE_ACCESSORYPVP,

	CUBE_SHIELDSPVM,
	CUBE_SHIELDSPVP,

	CUBE_HELMETPVM,
	CUBE_HELMETPVP,

	CUBE_BRACELETPVM,
	CUBE_BRACELETPVP,

	CUBE_NECKLACEPVM,
	CUBE_NECKLACEPVP,

	CUBE_EARRINGSPVM,
	CUBE_EARRINGSPVP,

	CUBE_SHOESPVM,
	CUBE_SHOESPVP,

	CUBE_BELTPVM,
	CUBE_BELTPVP,

	CUBE_EVENT,
	CUBE_ETC,
	
	CUBE_PET,
	CUBE_MOUNT,
	CUBE_SOULS,
	CUBE_SOULS_SCROLLS,
	CUBE_REFINE_SCROLLS,
	

	CUBE_CATEGORY_MAX,
};

enum ECubeInfoEnum
{
	CUBE_MATERIAL_MAX_NUM = 5,
};
#endif

#ifdef __ENABLE_REFINE_MSG_ADD__
enum ERefineFailType
{
	REFINE_FAIL_GRADE_DOWN,
	REFINE_FAIL_DEL_ITEM,
	REFINE_FAIL_KEEP_GRADE,
	REFINE_FAIL_MAX,
};
#endif

#ifdef __BELT_ATTR__
enum EAttributeBeltSet
{
	ATTRIBUTE_SET_BELT,
	ATTRIBUTE_SET_BELT_MAX_NUM,

	ATTRIBUTE_COUNT_BELT_ATTR = 4,
};
#endif

enum EMatrixCard
{
	MATRIX_CODE_MAX_LEN		= 192,
	MATRIX_ANSWER_MAX_LEN	= 8,
};

enum EWearPositions
{
	WEAR_BODY,						// 0
	WEAR_HEAD,						// 1
	WEAR_FOOTS,						// 2
	WEAR_WRIST,						// 3
	WEAR_WEAPON,					// 4
	WEAR_NECK,						// 5
	WEAR_EAR,						// 6
	WEAR_UNIQUE1,					// 7
	WEAR_UNIQUE2,					// 8
	WEAR_ARROW,						// 9
	WEAR_SHIELD,					// 10

	WEAR_ABILITY1,					// 11
	WEAR_ABILITY2,					// 12
	WEAR_ABILITY3,					// 13
	WEAR_ABILITY4,					// 14
	WEAR_ABILITY5,					// 15
	WEAR_ABILITY6,					// 16
	WEAR_ABILITY7,					// 17
	WEAR_ABILITY8,					// 18

	WEAR_COSTUME_BODY,				// 19
	WEAR_COSTUME_HAIR,				// 20

#ifdef __ENABLE_WEAPON_COSTUME_SYSTEM__
	WEAR_COSTUME_WEAPON,			// 21
#endif

#ifdef __ENABLE_SASH_SYSTEM__
	WEAR_COSTUME_SASH,				// 22
#endif

#ifdef __ENABLE_ALTERNATIVE_MOUNT_SYSTEM__
	WEAR_COSTUME_MOUNT,				// 23
#endif

#ifdef __PET_SYSTEM__
	WEAR_COSTUME_PET,				// 24
#endif

	WEAR_UNIQUE3,						// 25
	WEAR_UNIQUE4,						// 26

	WEAR_BELT,						// 27

#ifdef __ENABLE_12ZI_ELEMENT_SLOT__
	WEAR_PENDANT,					// 28
#endif

#ifdef __ENABLE_AMULET_SYSTEM__
	WEAR_AMULET,					// 29
#endif

	WEAR_MAX = 32
};

enum EDragonSoulDeckType
{
	DRAGON_SOUL_DECK_0,
	DRAGON_SOUL_DECK_1,
	DRAGON_SOUL_DECK_MAX_NUM = 2,

	DRAGON_SOUL_DECK_RESERVED_MAX_NUM = 3,
};

enum ESex
{
	SEX_MALE,
	SEX_FEMALE
};

enum EDirection
{
	DIR_NORTH,
	DIR_NORTHEAST,
	DIR_EAST,
	DIR_SOUTHEAST,
	DIR_SOUTH,
	DIR_SOUTHWEST,
	DIR_WEST,
	DIR_NORTHWEST,
	DIR_MAX_NUM
};

#define ABILITY_MAX_LEVEL	10

enum EAbilityDifficulty
{
	DIFFICULTY_EASY,
	DIFFICULTY_NORMAL,
	DIFFICULTY_HARD,
	DIFFICULTY_VERY_HARD,
	DIFFICULTY_NUM_TYPES
};

enum EAbilityCategory
{
	CATEGORY_PHYSICAL,
	CATEGORY_MENTAL,
	CATEGORY_ATTRIBUTE,
	CATEGORY_NUM_TYPES
};

enum EJobs
{
	JOB_WARRIOR,
	JOB_ASSASSIN,
	JOB_SURA,
	JOB_SHAMAN,
#ifdef __ENABLE_WOLFMAN_CHARACTER__
	JOB_WOLFMAN,
#endif
	JOB_MAX_NUM
};

enum ESkillGroups
{
	SKILL_GROUP_MAX_NUM = 2,
};

enum ERaceFlags
{
	RACE_FLAG_ANIMAL	= (1 << 0),
	RACE_FLAG_UNDEAD	= (1 << 1),
	RACE_FLAG_DEVIL		= (1 << 2),
	RACE_FLAG_HUMAN		= (1 << 3),
	RACE_FLAG_ORC		= (1 << 4),
	RACE_FLAG_MILGYO	= (1 << 5),
	RACE_FLAG_INSECT	= (1 << 6),
	RACE_FLAG_FIRE		= (1 << 7),
	RACE_FLAG_ICE		= (1 << 8),
	RACE_FLAG_DESERT	= (1 << 9),
	RACE_FLAG_TREE		= (1 << 10),
	RACE_FLAG_ATT_ELEC	= (1 << 11),
	RACE_FLAG_ATT_FIRE	= (1 << 12),
	RACE_FLAG_ATT_ICE	= (1 << 13),
	RACE_FLAG_ATT_WIND	= (1 << 14),
	RACE_FLAG_ATT_EARTH	= (1 << 15),
	RACE_FLAG_ATT_DARK	= (1 << 16),
#ifdef __ENABLE_12ZI_ELEMENT_ADD__
	RACE_FLAG_ATT_CZ = (1 << 17),
#endif
};

enum ELoads
{
	LOAD_NONE,
	LOAD_LIGHT,
	LOAD_NORMAL,
	LOAD_HEAVY,
	LOAD_MASSIVE
};

enum
{
	QUICKSLOT_TYPE_NONE,
	QUICKSLOT_TYPE_ITEM,
	QUICKSLOT_TYPE_SKILL,
	QUICKSLOT_TYPE_COMMAND,
	QUICKSLOT_TYPE_MAX_NUM,
};

enum EParts
{
	PART_MAIN,
	PART_WEAPON,
	PART_HEAD,
	PART_HAIR,

#ifdef __ENABLE_SASH_SYSTEM__
	PART_SASH,
#endif

	PART_MAX_NUM,
	PART_WEAPON_SUB,
};

enum EChatType
{
	CHAT_TYPE_TALKING,
	CHAT_TYPE_INFO,
	CHAT_TYPE_NOTICE,
	CHAT_TYPE_PARTY,
	CHAT_TYPE_GUILD,
	CHAT_TYPE_COMMAND,
	CHAT_TYPE_SHOUT,
	CHAT_TYPE_WHISPER,
	CHAT_TYPE_BIG_NOTICE,
#ifdef __ENABLE_DICE_SYSTEM__
	CHAT_TYPE_DICE_INFO, //11
#endif
	CHAT_TYPE_MAX_NUM
};

enum EWhisperType
{
	WHISPER_TYPE_NORMAL		= 0,
	WHISPER_TYPE_NOT_EXIST		= 1,
	WHISPER_TYPE_TARGET_BLOCKED	= 2,
	WHISPER_TYPE_SENDER_BLOCKED	= 3,
	WHISPER_TYPE_ERROR		= 4,
	WHISPER_TYPE_GM			= 5,
#ifdef __OFFLINE_MESSAGE_SYSTEM__
	WHISPER_TYPE_MESSAGE_GONE = 6,
	WHISPER_TYPE_MESSAGE_LIMIT_REACHED = 7,
	WHISPER_TYPE_MESSAGE_PLAYER_NOT_EXIST = 8,
	WHISPER_TYPE_MESSAGE_SENT = 9,
#endif
	WHISPER_TYPE_SYSTEM		= 0xFF
};

enum ECharacterPosition
{
	POSITION_GENERAL,
	POSITION_BATTLE,
	POSITION_DYING,
	POSITION_SITTING_CHAIR,
	POSITION_SITTING_GROUND,
	POSITION_INTRO,
	POSITION_MAX_NUM
};

enum EGMLevels
{
	GM_PLAYER,
	GM_LOW_WIZARD,
	GM_WIZARD,
	GM_HIGH_WIZARD,
	GM_GOD,
	GM_IMPLEMENTOR,
#ifdef __ADMIN_MANAGER__
	GM_MAX_NUM,
#else
	GM_DISABLE,
#endif
};

#ifdef __ADMIN_MANAGER__
enum EGMAllowFlags
{
	GM_ALLOW_DROP_PLAYER_ITEM = 1 << 0,
	GM_ALLOW_DROP_GM_ITEM = 1 << 1,
	GM_ALLOW_EXCHANGE_PLAYER_ITEM_TO_GM = 1 << 2,
	GM_ALLOW_EXCHANGE_PLAYER_ITEM_TO_PLAYER = 1 << 3,
	GM_ALLOW_EXCHANGE_GOLD_TO_PLAYER = 1 << 4,
	GM_ALLOW_EXCHANGE_GM_ITEM_TO_GM = 1 << 5,
	GM_ALLOW_EXCHANGE_GM_ITEM_TO_PLAYER = 1 << 6,
	GM_ALLOW_EXCHANGE_GOLD_TO_GM = 1 << 7,
	GM_ALLOW_EXCHANGE_TO_GM = 1 << 8,
	GM_ALLOW_EXCHANGE_TO_PLAYER = 1 << 9,
	GM_ALLOW_EXCHANGE_ANTIGIVE = 1 << 10,
	GM_ALLOW_BUY_PRIVATE_ITEM = 1 << 11,
	GM_ALLOW_CREATE_PRIVATE_SHOP = 1 << 12,
	GM_ALLOW_USE_SAFEBOX = 1 << 13,
	GM_ALLOW_CREATE_PLAYER = 1 << 14,
	GM_ALLOW_DELETE_PLAYER = 1 << 15,
	GM_ALLOW_ADMIN_MANAGER = 1 << 16,
	GM_ALLOW_MODIFY_OTHERS = 1 << 17,
};
#endif

enum EMobRank
{
	MOB_RANK_PAWN,
	MOB_RANK_S_PAWN,
	MOB_RANK_KNIGHT,
	MOB_RANK_S_KNIGHT,
	MOB_RANK_BOSS,
	MOB_RANK_KING,
	MOB_RANK_MAX_NUM
};

enum ECharType
{
	CHAR_TYPE_MONSTER,
	CHAR_TYPE_NPC,
	CHAR_TYPE_STONE,
	CHAR_TYPE_WARP,
	CHAR_TYPE_DOOR,
	CHAR_TYPE_BUILDING,
	CHAR_TYPE_PC,
	CHAR_TYPE_POLYMORPH_PC,
	CHAR_TYPE_HORSE,
	CHAR_TYPE_GOTO,
#ifdef __ENABLE_ALTERNATIVE_MOUNT_SYSTEM__
	CHAR_TYPE_MOUNT,
#endif
};

enum EBattleType
{
	BATTLE_TYPE_MELEE,
	BATTLE_TYPE_RANGE,
	BATTLE_TYPE_MAGIC,
	BATTLE_TYPE_SPECIAL,
	BATTLE_TYPE_POWER,
	BATTLE_TYPE_TANKER,
	BATTLE_TYPE_SUPER_POWER,
	BATTLE_TYPE_SUPER_TANKER,
	BATTLE_TYPE_MAX_NUM
};

enum EApplyTypes
{
	APPLY_NONE,			// 0
	APPLY_MAX_HP,		// 1
	APPLY_MAX_SP,		// 2
	APPLY_CON,			// 3
	APPLY_INT,			// 4
	APPLY_STR,			// 5
	APPLY_DEX,			// 6
	APPLY_ATT_SPEED,	// 7
	APPLY_MOV_SPEED,	// 8
	APPLY_CAST_SPEED,	// 9
	APPLY_HP_REGEN,		// 10
	APPLY_SP_REGEN,		// 11
	APPLY_POISON_PCT,	// 12
	APPLY_STUN_PCT,		// 13
	APPLY_SLOW_PCT,		// 14
	APPLY_CRITICAL_PCT,		// 15
	APPLY_PENETRATE_PCT,	// 16
	APPLY_ATTBONUS_HUMAN,	// 17
	APPLY_ATTBONUS_ANIMAL,	// 18
	APPLY_ATTBONUS_ORC,		// 19
	APPLY_ATTBONUS_MILGYO,	// 20
	APPLY_ATTBONUS_UNDEAD,	// 21
	APPLY_ATTBONUS_DEVIL,	// 22
	APPLY_STEAL_HP,			// 23
	APPLY_STEAL_SP,			// 24
	APPLY_MANA_BURN_PCT,	// 25
	APPLY_DAMAGE_SP_RECOVER,	// 26
	APPLY_BLOCK,			// 27
	APPLY_DODGE,			// 28
	APPLY_RESIST_SWORD,		// 29
	APPLY_RESIST_TWOHAND,	// 30
	APPLY_RESIST_DAGGER,	// 31
	APPLY_RESIST_BELL,		// 32
	APPLY_RESIST_FAN,		// 33
	APPLY_RESIST_BOW,		// 34
	APPLY_RESIST_FIRE,		// 35
	APPLY_RESIST_ELEC,		// 36
	APPLY_RESIST_MAGIC,		// 37
	APPLY_RESIST_WIND,		// 38
	APPLY_REFLECT_MELEE,	// 39
	APPLY_REFLECT_CURSE,	// 40
	APPLY_POISON_REDUCE,	// 41
	APPLY_KILL_SP_RECOVER,	// 42
	APPLY_EXP_DOUBLE_BONUS,	// 43
	APPLY_GOLD_DOUBLE_BONUS,	// 44
	APPLY_ITEM_DROP_BONUS,	// 45
	APPLY_POTION_BONUS,		// 46
	APPLY_KILL_HP_RECOVER,	// 47
	APPLY_IMMUNE_STUN,		// 48
	APPLY_IMMUNE_SLOW,		// 49
	APPLY_IMMUNE_FALL,		// 50
	APPLY_SKILL,			// 51
	APPLY_BOW_DISTANCE,		// 52
	APPLY_ATT_GRADE_BONUS,	// 53
	APPLY_DEF_GRADE_BONUS,	// 54
	APPLY_MAGIC_ATT_GRADE,	// 55
	APPLY_MAGIC_DEF_GRADE,	// 56
	APPLY_CURSE_PCT,		// 57
	APPLY_MAX_STAMINA,		// 58
	APPLY_ATTBONUS_WARRIOR,	// 59
	APPLY_ATTBONUS_ASSASSIN,	// 60
	APPLY_ATTBONUS_SURA,	// 61
	APPLY_ATTBONUS_SHAMAN,	// 62
	APPLY_ATTBONUS_MONSTER,	// 63
	APPLY_MALL_ATTBONUS,
	APPLY_MALL_DEFBONUS,
	APPLY_MALL_EXPBONUS,
	APPLY_MALL_ITEMBONUS,
	APPLY_MALL_GOLDBONUS,
	APPLY_MAX_HP_PCT,
	APPLY_MAX_SP_PCT,
	APPLY_SKILL_DAMAGE_BONUS,
	APPLY_NORMAL_HIT_DAMAGE_BONUS,
	APPLY_SKILL_DEFEND_BONUS,
	APPLY_NORMAL_HIT_DEFEND_BONUS,
	APPLY_PC_BANG_EXP_BONUS,
	APPLY_PC_BANG_DROP_BONUS,

	APPLY_EXTRACT_HP_PCT,

	APPLY_RESIST_WARRIOR,
	APPLY_RESIST_ASSASSIN,
	APPLY_RESIST_SURA,
	APPLY_RESIST_SHAMAN,
	APPLY_ENERGY,
	APPLY_DEF_GRADE,
	APPLY_COSTUME_ATTR_BONUS,
	APPLY_MAGIC_ATTBONUS_PER,
	APPLY_MELEE_MAGIC_ATTBONUS_PER,

	APPLY_RESIST_ICE,
	APPLY_RESIST_EARTH,
	APPLY_RESIST_DARK,

	APPLY_ANTI_CRITICAL_PCT,
	APPLY_ANTI_PENETRATE_PCT,

#ifdef __ENABLE_WOLFMAN_CHARACTER__
	APPLY_BLEEDING_REDUCE			= 92,		//92
	APPLY_BLEEDING_PCT				= 93,		//93
	APPLY_ATTBONUS_WOLFMAN			= 94,
	APPLY_RESIST_WOLFMAN			= 95,
	APPLY_RESIST_CLAW				= 96,
#endif

#ifdef __ENABLE_MAGIC_REDUCTION_SYSTEM__
	APPLY_RESIST_MAGIC_REDUCTION	= 98,	//98
#endif

#ifdef __ENABLE_SASH_SYSTEM__
	APPLY_ACCEDRAIN_RATE,
#endif

#ifdef __ENABLE_12ZI_ELEMENT_ADD__
	APPLY_ENCHANT_ELECT,
	APPLY_ENCHANT_FIRE,
	APPLY_ENCHANT_ICE,
	APPLY_ENCHANT_WIND,
	APPLY_ENCHANT_EARTH,
	APPLY_ENCHANT_DARK,
	APPLY_ATTBONUS_INSECT,
	APPLY_ATTBONUS_DESERT,
	APPLY_ATTBONUS_CZ,
#endif

	APPLY_RESIST_ALL,
	APPLY_ATTBONUS_METIN,
	APPLY_ATTBONUS_BOSS,
	APPLY_RESIST_MONSTER,
	APPLY_RESIST_BOSS,

	APPLY_PRECISION,

	APPLY_DUNGEON_DAMAGE_BONUS,
	APPLY_DUNGEON_RECV_DAMAGE_BONUS,
	APPLY_AGGRO_MONSTER_BONUS,
	APPLY_DOUBLE_ITEM_DROP_BONUS,

	MAX_APPLY_NUM,
};

enum EOnClickEvents
{
	ON_CLICK_NONE,
	ON_CLICK_SHOP,
	ON_CLICK_TALK,
#ifdef __ENABLE_CUBE_RENEWAL__
	ON_CLICK_CUBE,
#endif
	ON_CLICK_MAX_NUM
};

enum EOnIdleEvents
{
	ON_IDLE_NONE,
	ON_IDLE_GENERAL,
	ON_IDLE_MAX_NUM
};

enum EWindows
{
	RESERVED_WINDOW,
	INVENTORY,
	EQUIPMENT,
	SAFEBOX,
	MALL,
	DRAGON_SOUL_INVENTORY,
	BELT_INVENTORY,
#ifdef __ENABLE_SWITCHBOT__
	SWITCHBOT,
#endif
#ifdef __SPECIAL_STORAGE_ENABLE__
	SPECIAL_STORAGE_SPIRIT_STONES,
	SPECIAL_STORAGE_BOOKS,
	SPECIAL_STORAGE_REFINE_ITEMS,
	SPECIAL_STORAGE_UTILITY,
#endif
	GROUND
};

enum EMobSizes
{
	MOBSIZE_RESERVED,
	MOBSIZE_SMALL,
	MOBSIZE_MEDIUM,
	MOBSIZE_BIG
};

enum EAIFlags
{
	AIFLAG_AGGRESSIVE	= (1 << 0),
	AIFLAG_NOMOVE	= (1 << 1),
	AIFLAG_COWARD	= (1 << 2),
	AIFLAG_NOATTACKSHINSU	= (1 << 3),
	AIFLAG_NOATTACKJINNO	= (1 << 4),
	AIFLAG_NOATTACKCHUNJO	= (1 << 5),
	AIFLAG_ATTACKMOB = (1 << 6 ),
	AIFLAG_BERSERK	= (1 << 7),
	AIFLAG_STONESKIN	= (1 << 8),
	AIFLAG_GODSPEED	= (1 << 9),
	AIFLAG_DEATHBLOW	= (1 << 10),
	AIFLAG_REVIVE		= (1 << 11),
};

enum EMobStatType
{
	MOB_STATTYPE_POWER,
	MOB_STATTYPE_TANKER,
	MOB_STATTYPE_SUPER_POWER,
	MOB_STATTYPE_SUPER_TANKER,
	MOB_STATTYPE_RANGE,
	MOB_STATTYPE_MAGIC,
	MOB_STATTYPE_MAX_NUM
};

enum EImmuneFlags
{
	IMMUNE_STUN		= (1 << 0),
	IMMUNE_SLOW		= (1 << 1),
	IMMUNE_FALL		= (1 << 2),
	IMMUNE_CURSE	= (1 << 3),
	IMMUNE_POISON	= (1 << 4),
	IMMUNE_TERROR	= (1 << 5),
	IMMUNE_REFLECT	= (1 << 6),
};

enum EMobEnchants
{
	MOB_ENCHANT_CURSE,
	MOB_ENCHANT_SLOW,
	MOB_ENCHANT_POISON,
	MOB_ENCHANT_STUN,
	MOB_ENCHANT_CRITICAL,
	MOB_ENCHANT_PENETRATE,
#if defined(__ENABLE_WOLFMAN_CHARACTER__) && !defined(__USE_MOB_BLEEDING_AS_POISON__)
	MOB_ENCHANT_BLEEDING,
#endif
	MOB_ENCHANTS_MAX_NUM
};

enum EMobResists
{
	MOB_RESIST_SWORD,
	MOB_RESIST_TWOHAND,
	MOB_RESIST_DAGGER,
	MOB_RESIST_BELL,
	MOB_RESIST_FAN,
	MOB_RESIST_BOW,
	MOB_RESIST_FIRE,
	MOB_RESIST_ELECT,
	MOB_RESIST_MAGIC,
	MOB_RESIST_WIND,
	MOB_RESIST_POISON,
#if defined(__ENABLE_WOLFMAN_CHARACTER__) && !defined(__USE_MOB_CLAW_AS_DAGGER__)
	MOB_RESIST_CLAW,
#endif
#if defined(__ENABLE_WOLFMAN_CHARACTER__) && !defined(__USE_MOB_BLEEDING_AS_POISON__)
	MOB_RESIST_BLEEDING,
#endif
	MOB_RESISTS_MAX_NUM
};

enum
{
	SKILL_ATTR_TYPE_NORMAL = 1,
	SKILL_ATTR_TYPE_MELEE,
	SKILL_ATTR_TYPE_RANGE,
	SKILL_ATTR_TYPE_MAGIC
	/*
	   SKILL_ATTR_TYPE_FIRE,
	   SKILL_ATTR_TYPE_ICE,
	   SKILL_ATTR_TYPE_ELEC,
	   SKILL_ATTR_TYPE_DARK,
	   */
};

enum
{
	SKILL_NORMAL,
	SKILL_MASTER,
	SKILL_GRAND_MASTER,
	SKILL_PERFECT_MASTER,
};

enum EGuildWarType
{
	GUILD_WAR_TYPE_FIELD,
	GUILD_WAR_TYPE_BATTLE,
	GUILD_WAR_TYPE_FLAG,
	GUILD_WAR_TYPE_MAX_NUM
};

enum EGuildWarState
{
	GUILD_WAR_NONE,
	GUILD_WAR_SEND_DECLARE,
	GUILD_WAR_REFUSE,
	GUILD_WAR_RECV_DECLARE,
	GUILD_WAR_WAIT_START,
	GUILD_WAR_CANCEL,
	GUILD_WAR_ON_WAR,
	GUILD_WAR_END,
	GUILD_WAR_OVER,
	GUILD_WAR_RESERVE,

	GUILD_WAR_DURATION = 30 * 60,
	GUILD_WAR_WIN_POINT = 1000,
	GUILD_WAR_LADDER_HALF_PENALTY_TIME = 12 * 60 * 60,
};

enum EAttributeSet
{
	ATTRIBUTE_SET_WEAPON,
	ATTRIBUTE_SET_BODY,
	ATTRIBUTE_SET_WRIST,
	ATTRIBUTE_SET_FOOTS,
	ATTRIBUTE_SET_NECK,
	ATTRIBUTE_SET_HEAD,
	ATTRIBUTE_SET_SHIELD,
	ATTRIBUTE_SET_EAR,
	ATTRIBUTE_SET_MAX_NUM
};

enum EPrivType
{
	PRIV_NONE,
	PRIV_ITEM_DROP,
	PRIV_GOLD_DROP,
	PRIV_GOLD10_DROP,
	PRIV_EXP_PCT,
	MAX_PRIV_NUM,
};

enum EMoneyLogType
{
	MONEY_LOG_RESERVED,
	MONEY_LOG_MONSTER,
	MONEY_LOG_SHOP,
	MONEY_LOG_REFINE,
	MONEY_LOG_QUEST,
	MONEY_LOG_GUILD,
	MONEY_LOG_MISC,
	MONEY_LOG_MONSTER_KILL,
	MONEY_LOG_DROP,
	MONEY_LOG_TYPE_MAX_NUM,
};

enum EPremiumTypes
{
	PREMIUM_EXP,
	PREMIUM_ITEM,
	PREMIUM_SAFEBOX,
	PREMIUM_AUTOLOOT,
	PREMIUM_FISH_MIND,
	PREMIUM_MARRIAGE_FAST,
	PREMIUM_GOLD,
	PREMIUM_MAX_NUM = 9
};

enum SPECIAL_EFFECT
{
	SE_NONE,

	SE_HPUP_RED,
	SE_SPUP_BLUE,
	SE_SPEEDUP_GREEN,
	SE_DXUP_PURPLE,
	SE_CRITICAL,
	SE_PENETRATE,
	SE_BLOCK,
	SE_DODGE,
	SE_CHINA_FIREWORK,
	SE_SPIN_TOP,
	SE_SUCCESS,
	SE_FAIL,
	SE_FR_SUCCESS,
	SE_LEVELUP_ON_14_FOR_GERMANY,
	SE_LEVELUP_UNDER_15_FOR_GERMANY,
	SE_PERCENT_DAMAGE1,
	SE_PERCENT_DAMAGE2,
	SE_PERCENT_DAMAGE3,

	SE_AUTO_HPUP,
	SE_AUTO_SPUP,

	SE_EQUIP_RAMADAN_RING,
	SE_EQUIP_HALLOWEEN_CANDY,
	SE_EQUIP_HAPPINESS_RING,
	SE_EQUIP_LOVE_PENDANT,
};

enum ETeenFlags
{
	TEENFLAG_NONE = 0,
	TEENFLAG_1HOUR,
	TEENFLAG_2HOUR,
	TEENFLAG_3HOUR,
	TEENFLAG_4HOUR,
	TEENFLAG_5HOUR,
};

#include "item_length.h"






enum EDragonSoulRefineWindowSize
{
	DRAGON_SOUL_REFINE_GRID_MAX = 15,
};

enum EMisc2
{
	DRAGON_SOUL_EQUIP_SLOT_START = INVENTORY_MAX_NUM + WEAR_MAX_NUM,
	DRAGON_SOUL_EQUIP_SLOT_END = DRAGON_SOUL_EQUIP_SLOT_START + (DS_SLOT_MAX * DRAGON_SOUL_DECK_MAX_NUM),
	DRAGON_SOUL_EQUIP_RESERVED_SLOT_END = DRAGON_SOUL_EQUIP_SLOT_END + (DS_SLOT_MAX * DRAGON_SOUL_DECK_RESERVED_MAX_NUM),

	BELT_INVENTORY_SLOT_START = DRAGON_SOUL_EQUIP_RESERVED_SLOT_END,
	BELT_INVENTORY_SLOT_END = BELT_INVENTORY_SLOT_START + BELT_INVENTORY_SLOT_COUNT,

#ifdef __SPECIAL_STORAGE_ENABLE__
	SPECIAL_STORAGE_SPIRIT_STONES_START = BELT_INVENTORY_SLOT_END,
	SPECIAL_STORAGE_SPIRIT_STONES_END = SPECIAL_STORAGE_SPIRIT_STONES_START + SPECIAL_STORAGE_PAGE_SIZE * SPECIAL_STORAGE_PAGE_COUNT,

	SPECIAL_STORAGE_BOOKS_START = SPECIAL_STORAGE_SPIRIT_STONES_END,
	SPECIAL_STORAGE_BOOKS_END = SPECIAL_STORAGE_BOOKS_START + SPECIAL_STORAGE_PAGE_SIZE * SPECIAL_STORAGE_PAGE_COUNT,

	SPECIAL_STORAGE_REFINE_ITEMS_START = SPECIAL_STORAGE_BOOKS_END,
	SPECIAL_STORAGE_REFINE_ITEMS_END = SPECIAL_STORAGE_REFINE_ITEMS_START + SPECIAL_STORAGE_PAGE_SIZE * SPECIAL_STORAGE_PAGE_COUNT,

	SPECIAL_STORAGE_UTILITY_START = SPECIAL_STORAGE_REFINE_ITEMS_END,
	SPECIAL_STORAGE_UTILITY_END = SPECIAL_STORAGE_UTILITY_START + SPECIAL_STORAGE_PAGE_SIZE * SPECIAL_STORAGE_PAGE_COUNT,
#endif

#ifndef __SPECIAL_STORAGE_ENABLE__
	INVENTORY_AND_EQUIP_SLOT_MAX = BELT_INVENTORY_SLOT_END,
#else
	INVENTORY_AND_EQUIP_SLOT_MAX = SPECIAL_STORAGE_UTILITY_END,
#endif

#ifdef __SPECIAL_STORAGE_ENABLE__
	SPECIAL_STORAGE_START_WINDOW = SPECIAL_STORAGE_SPIRIT_STONES,
	SPECIAL_STORAGE_END_WINDOW = SPECIAL_STORAGE_UTILITY + 1,

	SPECIAL_STORAGE_START_CELL = SPECIAL_STORAGE_SPIRIT_STONES_START,
	SPECIAL_STORAGE_END_CELL = SPECIAL_STORAGE_UTILITY_END,
#endif
};

#pragma pack(push, 1)

typedef struct SItemPos
{
	BYTE window_type;
	WORD cell;
	SItemPos ()
	{
		window_type = INVENTORY;
		cell = WORD_MAX;
	}

	SItemPos (BYTE _window_type, WORD _cell)
	{
		window_type = _window_type;
		cell = _cell;
	}

	bool IsValidItemPosition() const
	{
		switch (window_type)
		{
		case RESERVED_WINDOW:
			return false;
		case INVENTORY:
		case EQUIPMENT:
		case BELT_INVENTORY:
#ifdef __SPECIAL_STORAGE_ENABLE__
		case SPECIAL_STORAGE_SPIRIT_STONES:
		case SPECIAL_STORAGE_BOOKS:
		case SPECIAL_STORAGE_REFINE_ITEMS:
		case SPECIAL_STORAGE_UTILITY:
#endif
			return cell < INVENTORY_AND_EQUIP_SLOT_MAX;
		case DRAGON_SOUL_INVENTORY:
			return cell < (DRAGON_SOUL_INVENTORY_MAX_NUM);

		case SAFEBOX:
		case MALL:
			return false;
#ifdef __ENABLE_SWITCHBOT__
		case SWITCHBOT:
			return cell < SWITCHBOT_SLOT_COUNT;
#endif
		default:
			return false;
		}
		return false;
	}

	bool IsEquipPosition() const
	{
		return ((INVENTORY == window_type || EQUIPMENT == window_type) && cell >= INVENTORY_MAX_NUM && cell < INVENTORY_MAX_NUM + WEAR_MAX_NUM)
			   || IsDragonSoulEquipPosition();
	}

	bool IsDragonSoulEquipPosition() const
	{
		return (window_type == INVENTORY) && (DRAGON_SOUL_EQUIP_SLOT_START <= cell) && (DRAGON_SOUL_EQUIP_SLOT_END > cell);
	}

	bool IsBeltInventoryPosition() const
	{
		return (BELT_INVENTORY_SLOT_START <= cell) && (BELT_INVENTORY_SLOT_END > cell);
	}

	bool IsDefaultInventoryPosition() const
	{
		return INVENTORY == window_type && cell < INVENTORY_MAX_NUM;
	}

#ifdef __ENABLE_SWITCHBOT__
	bool IsSwitchbotPosition() const
	{
		return SWITCHBOT == window_type && cell < SWITCHBOT_SLOT_COUNT;
	}
#endif

#ifdef __SPECIAL_STORAGE_ENABLE__
	bool IsSpecialStorage()
	{
		return (INVENTORY == window_type && (SPECIAL_STORAGE_START_CELL <= cell) && (SPECIAL_STORAGE_END_CELL > cell));
	}

	DWORD GetSpecialStorageType()
	{
		if ((SPECIAL_STORAGE_SPIRIT_STONES_START <= cell) && (SPECIAL_STORAGE_SPIRIT_STONES_END > cell))
		{
			return SPECIAL_STORAGE_SPIRIT_STONES;
		}
		else if ((SPECIAL_STORAGE_BOOKS_START <= cell) && (SPECIAL_STORAGE_BOOKS_END > cell))
		{
			return SPECIAL_STORAGE_BOOKS;
		}
		else if ((SPECIAL_STORAGE_REFINE_ITEMS_START <= cell) && (SPECIAL_STORAGE_REFINE_ITEMS_END > cell))
		{
			return SPECIAL_STORAGE_REFINE_ITEMS;
		}
		else if ((SPECIAL_STORAGE_UTILITY_START <= cell) && (SPECIAL_STORAGE_UTILITY_END > cell))
		{
			return SPECIAL_STORAGE_UTILITY;
		}

		return 0;
	}

	static std::pair<WORD, WORD> GetSpecialStorageRange(DWORD dwSpecialType)
	{
		std::pair<WORD, WORD> pRange = {};
		switch (dwSpecialType)
		{
		case INVENTORY:
			pRange = {0, INVENTORY_MAX_NUM};
			break;
		case SPECIAL_STORAGE_SPIRIT_STONES:
			pRange = {SPECIAL_STORAGE_SPIRIT_STONES_START, SPECIAL_STORAGE_SPIRIT_STONES_END};
			break;
		case SPECIAL_STORAGE_BOOKS:
			pRange = {SPECIAL_STORAGE_BOOKS_START, SPECIAL_STORAGE_BOOKS_END};
			break;
		case SPECIAL_STORAGE_REFINE_ITEMS:
			pRange = {SPECIAL_STORAGE_REFINE_ITEMS_START, SPECIAL_STORAGE_REFINE_ITEMS_END};
			break;
		case SPECIAL_STORAGE_UTILITY:
			pRange = {SPECIAL_STORAGE_UTILITY_START, SPECIAL_STORAGE_UTILITY_END};
			break;
		}

		return pRange;
	}
#endif

	bool operator==(const struct SItemPos& rhs) const
	{
		return (window_type == rhs.window_type) && (cell == rhs.cell);
	}

	bool operator!=(const struct SItemPos& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator<(const struct SItemPos& rhs) const
	{
		return (window_type < rhs.window_type) || ((window_type == rhs.window_type) && (cell < rhs.cell));
	}
} TItemPos;

const TItemPos NPOS (RESERVED_WINDOW, WORD_MAX);

typedef enum
{
	SHOP_COIN_TYPE_GOLD, // DEFAULT VALUE
	SHOP_COIN_TYPE_SPECIFIC_ITEM,
	SHOP_COIN_TYPE_SECONDARY_COIN,
} EShopCoinType;


#ifdef __ENABLE_HIDE_COSTUMES__
enum ECostumeOptionFlags
{
	COSTUME_FLAG_HEAD = (1 << 0),
	COSTUME_FLAG_BODY = (1 << 1),
	COSTUME_FLAG_WEAPON = (1 << 2),
#ifdef __ENABLE_SASH_SYSTEM__
	COSTUME_FLAG_SASH = (1 << 3),
#endif
};
#endif

#ifdef __ENABLE_BIOLOG_SYSTEM__
enum EBiologBonuses
{
	MAX_BONUSES_LENGTH = 3,
};
#endif

#ifdef __ENABLE_REFINE_ELEMENT__
enum ERefineElementType
{
	REFINE_ELEMENT_CATEGORY_NONE,
	REFINE_ELEMENT_CATEGORY_ELECT,
	REFINE_ELEMENT_CATEGORY_FIRE,
	REFINE_ELEMENT_CATEGORY_ICE,
	REFINE_ELEMENT_CATEGORY_WIND,
	REFINE_ELEMENT_CATEGORY_EARTH,
	REFINE_ELEMENT_CATEGORY_DARK,
	REFINE_ELEMENT_CATEGORY_MAX,
};

enum ERefineElement
{
	REFINE_ELEMENT_MAX = 3,
	ELEMENT_MIN_REFINE_LEVEL = 7,
	REFINE_ELEMENT_UPGRADE_YANG = 25000000,
	REFINE_ELEMENT_DOWNGRADE_YANG = 10000000,
	REFINE_ELEMENT_CHANGE_YANG = 50000000,

	REFINE_ELEMENT_UPGRADE_PROBABILITY = 80,
	REFINE_ELEMENT_DOWNGRADE_PROBABILITY = 100,
	REFINE_ELEMENT_CHANGE_PROBABILITY = 100,

	REFINE_ELEMENT_TYPE_UPGRADE = 0,
	REFINE_ELEMENT_TYPE_DOWNGRADE = 1,
	REFINE_ELEMENT_TYPE_CHANGE = 2,
	REFINE_ELEMENT_TYPE_UPGRADE_SUCCES = 10,
	REFINE_ELEMENT_TYPE_UPGRADE_FAIL = 11,
	REFINE_ELEMENT_TYPE_DOWNGRADE_SUCCES = 12,
	REFINE_ELEMENT_TYPE_CHANGE_SUCCES = 13,

	REFINE_ELEMENT_RANDOM_VALUE_MIN = 1,
	REFINE_ELEMENT_RANDOM_VALUE_MAX = 8,
	REFINE_ELEMENT_RANDOM_BONUS_VALUE_MIN = 2,
	REFINE_ELEMENT_RANDOM_BONUS_VALUE_MAX = 12,
};
#endif

#ifdef __ENABLE_ADMIN_BAN_PANEL__
// Bans Config
enum Ban_Type
{
	BAN_NONE,
	BAN_NORMAL,
	BAN_IP,
	BAN_TIME,
	BAN_UNBAN,
	#ifdef __HARDWARE_BAN__
	BAN_HARDWARE,
	#endif
	BAN_MAX_NUM,
};
#endif

#ifndef IS_SET
	#define IS_SET(flag, bit)                ((flag) & (bit))
#endif

#ifndef SET_BIT
	#define SET_BIT(var, bit)                ((var) |= (bit))
#endif

#ifndef REMOVE_BIT
	#define REMOVE_BIT(var, bit)             ((var) &= ~(bit))
#endif

#ifndef TOGGLE_BIT
	#define TOGGLE_BIT(var, bit)             ((var) = (var) ^ (bit))
#endif

#pragma pack(pop)
#endif
